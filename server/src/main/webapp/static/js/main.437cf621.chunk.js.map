{"version":3,"sources":["models/AppStateMode.ts","logic/IChatsListener.ts","logic/IChatListener.ts","models/Chat.ts","models/Message.ts","logic/IErrorHandler.ts","logic/NotificationHandler.ts","logic/AChatsHandler.ts","logic/ServerChatsHandler.ts","logic/MockChatsHandler.ts","logic/Connector.ts","components/login/LoginCard.tsx","components/login/SmartInputComponent.tsx","logic/setWindowTitle.ts","logic/OnEnterPress.ts","components/login/LoginComponent.tsx","components/login/RegisterComponent.tsx","components/sidebar/ChatListItemComponent.tsx","components/sidebar/PointComponent.tsx","components/sidebar/ChatListComponent.tsx","components/chat/ChatMessageComponent.tsx","components/globals/NavbarComponent.tsx","components/Error404Component.tsx","components/ReconnectingComponent.tsx","components/gameover/GameOverPage.tsx","components/globals/ErrorComponent.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AppStateMode","isIChatsListener","obj","undefined","onChatChange","isIChatListener","onMessage","Chat","init","messages","partner","chatId","this","message","sort","a","b","created","unix","push","length","unreadMessages","forEach","m","userHasRead","Message","id","text","image","isAnswer","answers","moment","locale","isIErrorHandler","errorHandler","onError","NotificationHandler","lastNotification","Notification","permission","requestPermission","title","body","isEnabled","allowed","duration","from","asSeconds","DURATION_BETWEEN_NOTIFICATIONS","instance","AChatsHandler","connectionListener","chatsListener","chatListener","chats","_currentChat","errorHandlers","timeA","Number","MAX_VALUE","timeB","getLastMessage","sendMessage","command","listener","detatchListener","answer","messageId","answerId","toString","Error","targetMessages","filter","l","collection","o","targetChat","useMessage","chat","find","c","addMessage","Instance","sendNotification","name","audio","Audio","play","then","remove","sortChats","targetMessage","onAnswer","onPointsChange","e","console","log","readAllMessages","onCurrentChatChange","ServerChatsHandler","baseUrl","token","wsConnection","url","URL","protocol","error","onCloseOrError","bind","Promise","res","WebSocket","onclose","onerror","onmessage","onWebSocketMessage","onopen","onConnect","socketMessage","readyState","window","setTimeout","send","JSON","stringify","onDisconnect","connect","ev","plainData","data","parse","onSocketMessage","MockChatsHandler","intervalId","simulateMessage","quereMessage","Array","isArray","i","imageUrl","j","Math","random","k","Date","getTime","setInterval","upgradePoints","rand","round","budget","chefSatisfaction","customerExperience","Connector","testMode","isTestMode","chatsHandler","username","password","credentials","fetch","method","headers","request","response","status","connectToWebSocket","login","LoginCardComponent","props","state","width","innerWidth","onSizeChange","document","getElementsByTagName","classList","add","addEventListener","removeEventListener","setState","Container","Jumbotron","className","Card","CardHeader","CardTitle","mode","CardBody","ButtonGroup","Button","color","active","href","tag","Form","children","React","Component","SmartInputComponent","FormGroup","Label","label","Input","type","placeholder","value","onChange","callback","onValue","evt","target","partial","onKeyPress","invalid","autoComplete","FormFeedback","setWindowTitle","querySelector","innerText","OnEnterPress","event","key","LoginComponent","busy","onInput","onSubmit","nValue","connector","location","Alert","onClick","disabled","icon","faSync","spin","ERRORS","RegisterComponent","usernameError","passwordError","repeatPassword","repeatPasswordError","register","readOnly","checkUndefined","items","item","ChatListItemComponent","interval","lastMessageDifference","setDifference","oldProps","oldStates","clearInterval","currentChat","lastMessage","fromNow","unreadBadge","substr","Badge","pill","ListGroupItem","setCurrentChat","ListGroupItemHeading","ListGroupItemText","PointComponent","score","Progress","ChatsListComponent","currentPoints","attach","initMessages","detatch","isOpen","src","alt","ListGroup","map","ChatMessageComponent","messagesEnd","openAnswers","onAnswerChoose","onSendMessage","chosenAnswer","scrollIntoView","behavior","scrollToBottom","submitAnswer","__html","replace","style","float","clear","ref","el","dangerouslySetInnerHTML","ln2br","isBefore","startOf","format","margin","Modal","toggle","toggleModal","ModalHeader","ModalBody","ModalFooter","faSmile","faPaperPlane","NavbarComponent","toggleChatsList","Navbar","dark","NavbarBrand","Nav","NavItem","Error404Component","faBookDead","ReconnectingComponent","GameOverPage","useEffect","role","reload","ErrorComponent","errors","s","onClose","App","isChatListOpen","LOGIN","renderLoginBody","renderNormalBody","GAME","CONNECTING","path","exact","render","to","Row","Col","md","fluid","GAMEOVER","component","Boolean","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.437cf621.chunk.js","sourcesContent":["export enum AppStateMode {\r\n    LOGIN,\r\n    GAME,\r\n    GAMEOVER,\r\n    CONNECTING\r\n}","import { VoidLike } from \"./VoidLike\";\r\nimport { Chat } from \"../models/Chat\";\r\nimport { Points } from \"../models/Points\";\r\n\r\n/**\r\n * Beobachtet alle Chats\r\n */\r\nexport default interface IChatsListener {\r\n    /**\r\n     * Wird aufgerufen wenn:\r\n     *  - Eine neue Nachricht eingeht\r\n     *  - Ein neuer Chat erstellt wurde\r\n     * @param chats Alle bekannten Chats\r\n     */\r\n    onChatChange(chats: Chat[]): VoidLike;\r\n\r\n    /**\r\n     * Wird aufgerufen, wenn ein Chat ausgewählt wird\r\n     * @param currentChat Aktueller Chat\r\n     */\r\n    onCurrentChatChange(currentChat?: Chat): VoidLike;\r\n\r\n    /**\r\n     * Wird aufgerufen, wenn sich die Punkte für den Kundensupport ändern\r\n     * @param currentPoints Aktuelle Punkte\r\n     */\r\n    onPointsChange(currentPoints: Points): VoidLike;\r\n}\r\n\r\nexport function isIChatsListener(obj: any) : obj is IChatsListener {\r\n    if (typeof(obj) === \"object\") {\r\n        if (obj.onChatChange !== undefined) {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    return false;\r\n}","import { Chat } from \"../models/Chat\";\r\nimport { VoidLike } from \"./VoidLike\";\r\nimport { Message } from \"../models/Message\";\r\n\r\n/**\r\n * Beobachtet einen Chat\r\n */\r\nexport default interface IChatListener {\r\n\r\n    /**\r\n     * Wird aufgerufen, wenn sich der aktuelle Chat ändert\r\n     * @param currentChat Aktueller Chat\r\n     */\r\n    onChatChange(currentChat: Chat): VoidLike;\r\n\r\n    /**\r\n     * Wird aufgerufen, wenn eine Nachricht empfangen wird oder es neue Antworten gibt\r\n     * @param currentChat Aktueller Chat\r\n     * @param message Eingegangende Message\r\n     */\r\n    onMessage(currentChat: Chat, message: Message): VoidLike;\r\n}\r\n\r\nexport function isIChatListener(obj: any) : obj is IChatListener {\r\n    if (typeof(obj) === \"object\") {\r\n        if (obj.onChatChange !== undefined && obj.onMessage !== undefined) {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    return false;\r\n}","import { IMessage, Message } from \"./Message\";\r\nimport { Partner } from \"./Partner\";\r\n\r\nexport interface IChat {\r\n    messages: IMessage[] | Message[];\r\n    partner: Partner;\r\n    chatId: string;\r\n}\r\n\r\nexport class Chat implements IChat {\r\n    messages: Message[];\r\n    partner: Partner;\r\n    chatId: string;\r\n\r\n    constructor(init: IChat) {\r\n        this.chatId = init.chatId;\r\n        this.partner = init.partner;\r\n        this.messages = [];\r\n    }\r\n\r\n    addMessage(message: Message) {\r\n        this.messages = this.messages.sort((a, b) => a.created.unix() - b.created.unix());\r\n        this.messages.push(message);\r\n    }\r\n\r\n    getLastMessage() : Message | null {\r\n        if (this.messages.length > 0) {\r\n            return this.messages[this.messages.length-1];\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    public get unreadMessages() : number {\r\n        let unreadMessages = 0;\r\n\r\n        this.messages.forEach(m => {\r\n            if (!m.userHasRead) {\r\n                unreadMessages++;\r\n            }\r\n        });\r\n\r\n        return unreadMessages;\r\n    }\r\n}","import { Answer } from \"./Answer\";\r\nimport moment from \"moment\";\r\n\r\nexport interface IMessage {\r\n    id: string;\r\n    text: string;\r\n    image: string // Zu definieren\r\n    isAnswer: boolean;\r\n    answers: Answer[]\r\n    userHasRead: boolean;\r\n    created: number | moment.Moment;\r\n}\r\n\r\nexport class Message implements IMessage {\r\n    id: string;\r\n    text: string;\r\n    image: string;\r\n    isAnswer: boolean;\r\n    answers: Answer[];\r\n    userHasRead: boolean;\r\n    created: moment.Moment;\r\n\r\n    constructor(init: IMessage) {\r\n        this.id = init.id;\r\n        this.text = init.text;\r\n        this.image = init.image;\r\n        this.isAnswer = init.isAnswer;\r\n        this.answers = init.answers;\r\n        this.userHasRead = init.userHasRead;\r\n        this.created = moment(init.created).locale(\"de\");\r\n    }\r\n}\r\n","import {VoidLike} from \"./VoidLike\";\r\n\r\nexport interface IErrorHandler {\r\n    onError(errorMessage: string): VoidLike;\r\n}\r\n\r\nexport function isIErrorHandler(obj: any) : obj is IErrorHandler {\r\n    const errorHandler = obj as IErrorHandler;\r\n    return errorHandler.onError !== undefined && typeof(errorHandler.onError) === \"function\";\r\n}","import moment from \"moment\";\r\n\r\nexport class NotificationHandler {\r\n\r\n    private static readonly DURATION_BETWEEN_NOTIFICATIONS = 10;\r\n\r\n    private static instance: NotificationHandler;\r\n    private lastNotification: moment.Moment | undefined;\r\n\r\n    private constructor() {\r\n        // Nur prüfen, wenn Notifications zur Verfügung stehen\r\n        if (Notification !== undefined && Notification.permission !== \"granted\") {\r\n            Notification.requestPermission();\r\n        }\r\n    }\r\n\r\n    private get isEnabled(): boolean {\r\n        return Notification !== undefined && Notification.permission === \"granted\";\r\n    }\r\n\r\n    private get allowed(): boolean {\r\n        if (this.lastNotification === undefined) {\r\n            this.lastNotification = moment();\r\n            return true;\r\n        }\r\n\r\n        const duration = moment.duration(moment().from(this.lastNotification));\r\n        if (duration.asSeconds() > NotificationHandler.DURATION_BETWEEN_NOTIFICATIONS) {\r\n            this.lastNotification = moment();\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public sendNotification(title: string, body: string): void {\r\n        if (this.isEnabled && this.allowed) {\r\n            new Notification(title, {\r\n                body\r\n            });\r\n        }\r\n    }\r\n\r\n    public static get Instance(): NotificationHandler {\r\n        return this.instance || (this.instance = new this());\r\n    }\r\n}","import IChatsListener, {isIChatsListener} from \"./IChatsListener\";\r\nimport IChatListener, {isIChatListener} from \"./IChatListener\";\r\nimport {Chat} from \"../models/Chat\";\r\nimport {SocketMessage} from \"../models/SocketMessage\";\r\nimport {VoidLike} from \"./VoidLike\";\r\nimport {IMessage, Message} from \"../models/Message\";\r\nimport {Answer} from \"../models/Answer\";\r\nimport IConnectionListener from \"./IConnectionListener\";\r\nimport {IErrorHandler, isIErrorHandler} from \"./IErrorHandler\";\r\nimport {NotificationHandler} from \"./NotificationHandler\";\r\nimport moment from \"moment\";\r\n\r\n/**\r\n * Verwaltet alle Chats und Nachrichten und kommuniziert über die angehangenden Listener\r\n */\r\nexport default abstract class AChatsHandler {\r\n\r\n    private chatsListener: IChatsListener[];\r\n    private chatListener: IChatListener[];\r\n    private chats: Chat[];\r\n    private _currentChat?: Chat;\r\n    private errorHandlers: IErrorHandler[];\r\n    protected connectionListener: IConnectionListener;\r\n\r\n    constructor(connectionListener: IConnectionListener) {\r\n        this.chatListener = [];\r\n        this.chatsListener = [];\r\n        this.chats = [];\r\n        this.errorHandlers = [];\r\n        this.connectionListener = connectionListener;\r\n    }\r\n\r\n    private sortChats(): void {\r\n        this.chats = this.chats.sort((a, b) => {\r\n            let timeA = Number.MAX_VALUE,\r\n                timeB = Number.MAX_VALUE;\r\n\r\n            if (a.getLastMessage() !== undefined) {\r\n                timeA = a.getLastMessage()!.created.unix();\r\n            }\r\n            if (b.getLastMessage() !== undefined) {\r\n                timeB = b.getLastMessage()!.created.unix();\r\n            }\r\n\r\n            return timeB - timeA;\r\n        });\r\n    }\r\n\r\n    public get currentChat(): Chat | undefined {\r\n        return this._currentChat;\r\n    }\r\n\r\n    public set currentChat(chat: Chat | undefined) {\r\n        this._currentChat = chat;\r\n        if (chat !== undefined) {\r\n            this.readAllMessages();\r\n            this.chatListener.forEach(c => c.onChatChange(this._currentChat!));\r\n        }\r\n\r\n        this.chatsListener.forEach(c => c.onCurrentChatChange(this._currentChat));\r\n    }\r\n\r\n    /**\r\n     * Bittet den Server, alle Nachrichten neu zu senden\r\n     */\r\n    public initMessages() {\r\n        this.sendMessage({\r\n            command: \"Reinit\"\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Verbindet mit dem Server (oder dem Mock Server)\r\n     */\r\n    public abstract connect(): Promise<boolean>;\r\n\r\n    /**\r\n     * Sendet die Message an den Server\r\n     * @param socketMessage Abzusendene Message\r\n     */\r\n    protected abstract sendMessage(socketMessage: SocketMessage): VoidLike;\r\n\r\n    /**\r\n     * Hängt den Listener an den Handler. Sollte in componentDidMount() aufgerufen werden\r\n     * @param listener Listener\r\n     */\r\n    public attach(listener: IChatListener | IChatsListener | IErrorHandler): void {\r\n        if (isIChatListener(listener)) {\r\n            this.chatListener.push(listener);\r\n        } else if (isIChatsListener(listener)) {\r\n            this.chatsListener.push(listener);\r\n        } else if (isIErrorHandler(listener)) {\r\n            this.errorHandlers.push(listener);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Entfernt den Listener vom Handler. Sollte in componentWillUnmount() aufgerufen werden\r\n     * @param listener Listener\r\n     */\r\n    public detatch(listener: IChatsListener | IChatListener | IErrorHandler): void {\r\n        if (isIChatListener(listener)) {\r\n            this.chatListener = this.detatchListener(listener, this.chatListener)\r\n        } else if (isIChatsListener(listener)) {\r\n            this.chatsListener = this.detatchListener(listener, this.chatsListener);\r\n        } else if (isIErrorHandler(listener)) {\r\n            this.errorHandlers = this.detatchListener(listener, this.errorHandlers);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sendet die Antwort an den Server\r\n     * @param answer Antwort\r\n     */\r\n    public submitAnswer(answer: Answer, chatId: string, messageId: string): void {\r\n        const answerId: number = answer.id;\r\n\r\n        this.sendMessage({\r\n            command: \"SubmitAnswer\",\r\n            answerId,\r\n            chatId,\r\n            messageId\r\n        });\r\n\r\n        this.onMessage(chatId, {\r\n            answers: [],\r\n            created: moment(),\r\n            id: answerId.toString(),\r\n            isAnswer: true,\r\n            image: \"\",\r\n            text: answer.text,\r\n            userHasRead: true\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Makiert alle Nachrichten im aktuellen Chat als gelesen\r\n     */\r\n    public readAllMessages() {\r\n        if (this._currentChat === undefined) {\r\n            throw new Error(\"No current Chat.\");\r\n        }\r\n\r\n        let targetMessages = this._currentChat.messages.filter(m => !m.userHasRead);\r\n        for (let message of targetMessages) {\r\n            message.userHasRead = true;\r\n            this.sendMessage({\r\n                command: \"ReadMessage\",\r\n                messageId: message.id,\r\n                chatId: this._currentChat.chatId\r\n            });\r\n        }\r\n        this.chatsListener.forEach(l => l.onChatChange(this.chats));\r\n    }\r\n\r\n    /**\r\n     * Entfernt den Listener aus dem Array (gibt das neue Array zurück)\r\n     * @param obj Listener\r\n     * @param collection Listenercollection\r\n     */\r\n    private detatchListener<T>(obj: T, collection: T[]): T[] {\r\n        return collection.filter(o => o !== obj);\r\n    }\r\n\r\n    /**\r\n     * Fügt die Nachricht dem übergebenen Chat hinzu\r\n     * @param chatId Betroffene ChatId\r\n     * @param message Neue Nachricht\r\n     */\r\n    private onMessage(chatId: string, message: IMessage) {\r\n        let useMessage = new Message(message);\r\n        let targetChat: Chat;\r\n\r\n        const chat = this.chats.find(c => c.chatId === chatId);\r\n\r\n        if (chat === undefined) {\r\n            throw new Error(`Chat ${chatId} not found. Fatal Error`);\r\n        } else {\r\n            targetChat = chat;\r\n        }\r\n\r\n        targetChat.addMessage(useMessage);\r\n\r\n        // Nur Benachrichtigen, wenn Nachricht neu ist\r\n        if (!message.userHasRead) {\r\n            NotificationHandler.Instance.sendNotification(targetChat.partner.name, message.text);\r\n            let audio = new Audio(\"eventually.mp3\");\r\n            audio.play().then(() => audio.remove());\r\n        }\r\n\r\n        this.sortChats();\r\n\r\n        if (this._currentChat !== undefined && chatId === this._currentChat.chatId) {\r\n            this.chatListener.forEach(c => c.onMessage(this._currentChat!, useMessage));\r\n        }\r\n        this.chatsListener.forEach(c => c.onChatChange(this.chats));\r\n    }\r\n\r\n    /**\r\n     * Fügt die übergebene Antwort der bestimmten Nachricht im bestimmen Chat hinzu und benachrichtigt\r\n     * @param chatId Betroffener Chat\r\n     * @param messageId Betroffene Nachricht\r\n     * @param answer Gegebene Antwort\r\n     */\r\n    private onAnswer(chatId: string, messageId: string, answer: Answer) {\r\n        let targetChat = this.chats.find(c => c.chatId === chatId);\r\n        if (targetChat === undefined) {\r\n            throw new Error(`Chat ${chatId} not found. Fatal Error`);\r\n        }\r\n\r\n        let targetMessage = targetChat.messages.find(m => m.id === messageId);\r\n        if (targetMessage === undefined) {\r\n            throw new Error(`Message ${messageId} on Chat ${chatId} not found. Fatal Error`);\r\n        }\r\n\r\n        targetMessage.answers.push(answer);\r\n\r\n        if (this._currentChat !== undefined && this._currentChat.chatId === chatId) {\r\n            this.chatListener.forEach(c => c.onMessage(this._currentChat!, targetMessage!));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Bearbeitet die vom Server bekommene Nachricht und führt Aktionen aus\r\n     * @param message Vom Server bekommene Message\r\n     */\r\n    protected onSocketMessage(message: SocketMessage) {\r\n        if (process.env.NODE_ENV !== \"production\") {\r\n            console.info(\"%cEingehende Nachricht: \", \"color: white; background-color: green;\", message);\r\n        }\r\n\r\n        switch (message.command) {\r\n            case \"CreateChat\":\r\n                this.chats.push(new Chat(message.chat));\r\n                if (message.chat.messages !== undefined && message.chat.messages.length > 0) {\r\n                    for (let m of message.chat.messages) {\r\n                        this.onMessage(message.chat.chatId, m);\r\n                    }\r\n                }\r\n                this.sortChats();\r\n                this.chatsListener.forEach(c => c.onChatChange(this.chats));\r\n                break;\r\n            case \"AddMessage\":\r\n                this.onMessage(message.chatId, message.message);\r\n                break;\r\n            case \"AddAnswer\":\r\n                this.onAnswer(message.chatId, message.messageId, message.answer);\r\n                break;\r\n            case \"ChangePoints\":\r\n                this.chatsListener.forEach(c => c.onPointsChange(message));\r\n                break;\r\n            case \"HandleError\":\r\n                this.errorHandlers.forEach(e => e.onError(message.message));\r\n                break;\r\n            case \"WebSocketCreated\":\r\n                console.log(\"WebSocket erzeugt. Juhu\");\r\n                break;\r\n            default:\r\n                throw new Error(`The Command ${message.command} is unknown`);\r\n        }\r\n    }\r\n\r\n}","import AChatsHandler from \"./AChatsHandler\";\r\nimport {SocketMessage} from \"../models/SocketMessage\";\r\nimport IConnectionListener from \"./IConnectionListener\";\r\n\r\nexport class ServerChatsHandler extends AChatsHandler {\r\n\r\n    private readonly baseUrl: string;\r\n    private readonly token: string;\r\n    private wsConnection?: WebSocket;\r\n\r\n    constructor(connectionListener: IConnectionListener, baseUrl: string, token: string) {\r\n        super(connectionListener);\r\n        this.baseUrl = baseUrl;\r\n        this.token = token;\r\n    }\r\n\r\n    connect(): Promise<boolean> {\r\n        const url = new URL(`${this.baseUrl}/game/${this.token}`);\r\n        url.protocol = \"ws:\";\r\n\r\n        const error = this.onCloseOrError.bind(this);\r\n\r\n        return new Promise<boolean>((res) => {\r\n            this.wsConnection = new WebSocket(url.toString());\r\n            this.wsConnection.onclose = error;\r\n            this.wsConnection.onerror = error;\r\n            this.wsConnection.onmessage = this.onWebSocketMessage.bind(this);\r\n            this.wsConnection.onopen = () => {\r\n                console.log(\"Websocket verbunden!\");\r\n                res(true);\r\n                this.connectionListener.onConnect(this);\r\n            };\r\n        });\r\n    }\r\n\r\n    protected sendMessage(socketMessage: SocketMessage): void | Promise<void> {\r\n        if (process.env.NODE_ENV !== \"production\") {\r\n            console.info(\"%cAusgehende Nachricht: \", \"color: white; background-color: red;\", socketMessage);\r\n        }\r\n\r\n        // Socket steht nicht bereit. Try later again\r\n        if (this.wsConnection === undefined || this.wsConnection.readyState !== 1) {\r\n            window.setTimeout(() => this.sendMessage(socketMessage), 1000);\r\n        }\r\n        else {\r\n            this.wsConnection.send(JSON.stringify(socketMessage));\r\n        }\r\n    }\r\n\r\n    private onCloseOrError() {\r\n        this.connectionListener.onDisconnect();\r\n        console.log(\"Websocket getrennt. Versuche erneute Verbindung...\");\r\n        // Nicht rekursiv starten...\r\n        window.setTimeout(this.connect.bind(this), 0);\r\n    }\r\n\r\n    private onWebSocketMessage(ev: MessageEvent) {\r\n        const plainData = ev.data as string;\r\n        const message = JSON.parse(plainData) as SocketMessage;\r\n        this.onSocketMessage(message);\r\n    }\r\n\r\n}","import AChatsHandler from \"./AChatsHandler\";\r\nimport { SocketMessage } from \"../models/SocketMessage\";\r\nimport { VoidLike } from \"./VoidLike\";\r\n\r\nexport class MockChatsHandler extends AChatsHandler {\r\n\r\n    private intervalId: number | undefined;\r\n\r\n    public async connect(): Promise<boolean> {\r\n        (window as any).simulateMessage = this.simulateMessage.bind(this);\r\n        console.log(\"Globale Funktion simulateMessage(...) hinzugefügt\");\r\n\r\n        window.setTimeout(this.quereMessage.bind(this), 2000);\r\n\r\n        this.connectionListener.onConnect(this);\r\n        return true;\r\n    }\r\n\r\n    protected sendMessage(socketMessage: SocketMessage): VoidLike {\r\n        console.log(\"Nachricht an Server\", socketMessage);\r\n    }\r\n\r\n    public simulateMessage(message: SocketMessage | SocketMessage[]) {\r\n        if (Array.isArray(message)) {\r\n            message.forEach(m => this.onSocketMessage(m));\r\n        }\r\n        else {\r\n            this.onSocketMessage(message);\r\n        }\r\n    }\r\n\r\n    private quereMessage() {\r\n        for (let i = 0; i < 5; i++) {\r\n            this.simulateMessage(\r\n                {\r\n                    command: \"CreateChat\",\r\n                    chat: {\r\n                        chatId: i.toString(),\r\n                        partner: {\r\n                            name: \"Kunde \" + (i + 1),\r\n                            imageUrl: \"http://emilcarlsson.se/assets/harveyspecter.png\",\r\n                        },\r\n                        messages: [],\r\n                    }\r\n                });\r\n\r\n            for (let j = 0; j < 10; j++) {\r\n                let isAnswer = (Math.random() < 0.5);\r\n                let answers = [];\r\n                if (!isAnswer) {\r\n                    let a = Math.random() * 4 + 1;\r\n                    for (let k = 0; k < a; k++) {\r\n                        answers.push({\r\n                            id: j * 10 + k,\r\n                            text: \"Antwort \" + j + '' + k\r\n                        });\r\n                    }\r\n                }\r\n                this.simulateMessage({\r\n                    command: \"AddMessage\",\r\n                    chatId: i.toString(),\r\n                    message: {\r\n                        id: ((i * 10) + j).toString(),\r\n                        text: \"Hallo Will \" + ((i * 10) + j).toString(),\r\n                        image: \"\",\r\n                        answers: answers,\r\n                        userHasRead: false,\r\n                        created: (new Date().getTime() - 99999999),\r\n                        isAnswer: isAnswer\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        this.intervalId = window.setInterval(this.upgradePoints.bind(this), 5000);\r\n    }\r\n\r\n    private upgradePoints() {\r\n        const rand = () => Math.round(Math.random() * 100);\r\n        this.simulateMessage({\r\n            command: \"ChangePoints\",\r\n            budget: rand(),\r\n            chefSatisfaction: rand(),\r\n            customerExperience: rand()\r\n        })\r\n    }\r\n\r\n}\r\n","import IConnectionListener from \"./IConnectionListener\";\r\nimport {ServerChatsHandler} from \"./ServerChatsHandler\";\r\nimport {MockChatsHandler} from \"./MockChatsHandler\";\r\n\r\nexport class Connector {\r\n\r\n    private readonly listener: IConnectionListener;\r\n\r\n    private readonly baseUrl: string;\r\n\r\n    private readonly isTestMode: boolean;\r\n\r\n    constructor(baseUrl: string, listener: IConnectionListener, testMode: boolean = false) {\r\n        this.listener = listener;\r\n        this.baseUrl = baseUrl;\r\n        this.isTestMode = testMode;\r\n    }\r\n\r\n    private async connectToWebSocket(token: string) {\r\n        const chatsHandler = this.isTestMode ? new MockChatsHandler(this.listener) : new ServerChatsHandler(this.listener, this.baseUrl, token);\r\n        await chatsHandler.connect();\r\n    }\r\n\r\n    async login(username: string, password: string): Promise<void> {\r\n        const url = this.baseUrl + \"/api/login\";\r\n        const credentials = {username, password};\r\n\r\n        const request = await fetch(url, {\r\n            body: JSON.stringify(credentials),\r\n            method: \"PUT\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        });\r\n\r\n        const response = await request.text();\r\n\r\n        if (request.status === 200) {\r\n            await this.connectToWebSocket(response);\r\n        } else {\r\n            throw new Error(response);\r\n        }\r\n    }\r\n\r\n    async register(username: string, password: string): Promise<void> {\r\n        const url = this.baseUrl + \"/api/register\";\r\n        const credentials = {username, password};\r\n\r\n        const request = await fetch(url, {\r\n            body: JSON.stringify(credentials),\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        });\r\n\r\n        const response = await request.text();\r\n\r\n        if (request.status === 200 || request.status === 204) {\r\n            await this.login(username, password);\r\n        } else {\r\n            throw new Error(response);\r\n        }\r\n    }\r\n\r\n}","import {Card, CardBody, Form, Button, ButtonGroup, CardHeader, CardTitle, Jumbotron, Container} from \"reactstrap\";\r\nimport \"../../styles/elements/login.scss\";\r\nimport React from \"react\";\r\n\r\nexport interface LoginCardProps {\r\n    mode: \"login\" | \"register\"\r\n}\r\n\r\ninterface LoginCardStates {\r\n    width: number;\r\n}\r\n\r\nexport class LoginCardComponent extends React.Component<React.PropsWithChildren<LoginCardProps>, LoginCardStates> {\r\n\r\n    constructor(props: React.PropsWithChildren<LoginCardProps>) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            width: window.innerWidth\r\n        }\r\n\r\n        this.onSizeChange = this.onSizeChange.bind(this)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.onSizeChange();\r\n        document.getElementsByTagName(\"body\")[0].classList.add(\"login-register-background\");\r\n        window.addEventListener(\"resize\", this.onSizeChange);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        document.getElementsByTagName(\"body\")[0].classList.remove(\"login-register-background\");\r\n        window.removeEventListener(\"resize\", this.onSizeChange);\r\n    }\r\n\r\n    onSizeChange() {\r\n        this.setState({\r\n            width: window.innerWidth\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return <Container>\r\n            <Jumbotron className=\"transparent text-center\">\r\n                <h2 className=\"display-4 headline-font\">\r\n                    Life-Work-Balance von William Walker\r\n                </h2>\r\n            </Jumbotron>\r\n            <Card className={(this.state.width > 992 ? \"mx-auto w-50\" : \"mx-auto\") + \" transparent\"}>\r\n                <CardHeader>\r\n                    <CardTitle>\r\n                        <h4 className=\"\">\r\n                            {this.props.mode === \"login\" && \"Anmelden\"}\r\n                            {this.props.mode === \"register\" && \"Registrieren\"}\r\n                        </h4>\r\n                    </CardTitle>\r\n                </CardHeader>\r\n                <CardBody>\r\n                    <ButtonGroup>\r\n                        <Button color=\"primary\" active={this.props.mode === \"login\"} href=\"#/login\" tag=\"a\">Anmelden</Button>\r\n                        <Button color=\"primary\" active={this.props.mode === \"register\"} href=\"#/register\" tag=\"a\">Registrieren</Button>\r\n                    </ButtonGroup>\r\n                    <Form>\r\n                        {this.props.children}\r\n                    </Form>\r\n                </CardBody>\r\n            </Card>\r\n        </Container>\r\n    }\r\n}","import React from \"react\";\r\nimport { FormGroup, Label, Input, FormFeedback } from \"reactstrap\";\r\nimport { InputType } from \"reactstrap/lib/Input\";\r\n\r\ntype OnValueCallback<T> = (nValue: Partial<T>) => any;\r\n\r\nexport interface SmartInputProps<T> {\r\n    label: string\r\n    name: keyof T\r\n    placeholder?: string\r\n    value: string\r\n    onValue: OnValueCallback<T>\r\n    type: InputType\r\n    error?: string\r\n    onKeyPress?: (event: React.KeyboardEvent<HTMLInputElement>) => void,\r\n    autoComplete: string\r\n}\r\n\r\nfunction getValueHandler<T>(callback: OnValueCallback<T>): (event: React.ChangeEvent<HTMLInputElement>) => void {\r\n    return (evt) => {\r\n        let target = evt.target;\r\n        let field = target.name as keyof T;\r\n        let partial: Partial<T> = {};\r\n        (partial[field] as any) = target.value;\r\n        callback(partial);\r\n    };\r\n}\r\n\r\nexport function SmartInputComponent<T>(props: SmartInputProps<T>) {\r\n    return <FormGroup>\r\n        <Label>{props.label}</Label>\r\n        <Input\r\n            type={props.type}\r\n            placeholder={props.placeholder}\r\n            value={props.value}\r\n            name={props.name as string}\r\n            onChange={getValueHandler(props.onValue)}\r\n            onKeyPress={props.onKeyPress}\r\n            invalid={props.error !== undefined}\r\n            autoComplete={props.autoComplete}\r\n        />\r\n        {props.error !== undefined &&\r\n            <FormFeedback>\r\n                {props.error}\r\n            </FormFeedback>}\r\n    </FormGroup>\r\n}","export default function setWindowTitle(title?: string) : void {\r\n    const titleNode = document.querySelector(\"title\");\r\n\r\n    if (title === undefined) {\r\n        title = \"LWB William Walker\";\r\n    }\r\n    else {\r\n        title += \" | LWB William Walker\";\r\n    }\r\n\r\n    titleNode!.innerText = title;\r\n}","export default function OnEnterPress(then: () => void): (event: React.KeyboardEvent<HTMLInputElement>) => void {\r\n    return (event: React.KeyboardEvent<HTMLInputElement>) => {\r\n        if (event.key === \"Enter\") {\r\n            then();\r\n        }\r\n    }\r\n}","import React from \"react\";\r\nimport { Alert, Button } from \"reactstrap\";\r\nimport \"../../styles/elements/login.scss\";\r\nimport { LoginCardComponent } from \"./LoginCard\";\r\nimport { SmartInputComponent } from \"./SmartInputComponent\";\r\nimport setWindowTitle from \"../../logic/setWindowTitle\";\r\nimport { LoginRegisterProps } from \"../../models/LoginRegisterProps\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faSync } from \"@fortawesome/free-solid-svg-icons\";\r\nimport OnEnterPress from \"../../logic/OnEnterPress\";\r\n\r\nexport interface LoginStates {\r\n    error?: string;\r\n    busy: boolean;\r\n    username: string;\r\n    password: string;\r\n}\r\n\r\nexport class LoginComponent extends React.Component<LoginRegisterProps, LoginStates> {\r\n\r\n    constructor(props: LoginRegisterProps) {\r\n        super(props);\r\n        this.state = {\r\n            busy: false,\r\n            username: \"\",\r\n            password: \"\"\r\n        };\r\n\r\n        this.onInput = this.onInput.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n    }\r\n\r\n    onInput(nValue: Partial<LoginStates>) {\r\n        this.setState(nValue as LoginStates);\r\n    }\r\n\r\n    componentDidMount() {\r\n        setWindowTitle(\"Login\");\r\n    }\r\n\r\n    async onSubmit(): Promise<void> {\r\n        this.setState({ busy: true, error: undefined });\r\n\r\n        const { username, password } = this.state;\r\n\r\n        try {\r\n            await this.props.connector.login(username, password);\r\n            window.location.href = \"#/\";\r\n        } catch (e) {\r\n            this.setState({\r\n                busy: false,\r\n                error: e.message\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return <LoginCardComponent mode=\"login\">\r\n\r\n            {this.state.error && <Alert color=\"danger\">\r\n                {this.state.error}\r\n            </Alert>}\r\n\r\n            <SmartInputComponent\r\n                label=\"Username\"\r\n                onValue={this.onInput}\r\n                name=\"username\"\r\n                placeholder=\"william.walker1\"\r\n                value={this.state.username}\r\n                type=\"text\"\r\n                autoComplete=\"username\"\r\n            />\r\n\r\n            <SmartInputComponent\r\n                label=\"Passwort\"\r\n                onValue={this.onInput}\r\n                name=\"password\"\r\n                placeholder=\"132456789\"\r\n                value={this.state.password}\r\n                type=\"password\"\r\n                autoComplete=\"current-password\"\r\n                onKeyPress={OnEnterPress(this.onSubmit)}\r\n            />\r\n\r\n            <Button\r\n                onClick={this.onSubmit}\r\n                color=\"success\"\r\n                disabled={this.state.username.length === 0 || this.state.password.length === 0}\r\n            >\r\n                {this.state.busy && <FontAwesomeIcon icon={faSync} spin />}\r\n                Anmelden\r\n            </Button>\r\n        </LoginCardComponent>\r\n    }\r\n}","import React from \"react\";\r\nimport { LoginCardComponent } from \"./LoginCard\";\r\nimport { Alert, Button, FormGroup, Input, Label } from \"reactstrap\";\r\nimport { SmartInputComponent } from \"./SmartInputComponent\";\r\nimport setWindowTitle from \"../../logic/setWindowTitle\";\r\nimport { LoginRegisterProps } from \"../../models/LoginRegisterProps\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faSync } from \"@fortawesome/free-solid-svg-icons\";\r\nimport OnEnterPress from \"../../logic/OnEnterPress\";\r\n\r\nconst ERRORS = {\r\n    usernameToShort: \"Nutzername darf nicht leer sein\",\r\n    passwordToShort: \"Passwort darf nicht leer sein\",\r\n    passwordMatch: \"Passwörter stimmen nicht überein\"\r\n};\r\n\r\ninterface RegisterStates {\r\n    error?: string\r\n    busy: boolean\r\n    name: string\r\n    username: string\r\n    usernameError: string\r\n    password: string\r\n    passwordError?: string\r\n    repeatPassword: string\r\n    repeatPasswordError?: string\r\n}\r\n\r\nexport class RegisterComponent extends React.Component<LoginRegisterProps, RegisterStates> {\r\n\r\n    constructor(props: LoginRegisterProps) {\r\n        super(props);\r\n        this.state = {\r\n            busy: false,\r\n            name: \"William Walker\",\r\n            username: \"\",\r\n            usernameError: ERRORS.usernameToShort,\r\n            password: \"\",\r\n            passwordError: ERRORS.passwordToShort,\r\n            repeatPassword: \"\"\r\n        };\r\n\r\n        this.onInput = this.onInput.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        setWindowTitle(\"Registrieren\");\r\n    }\r\n\r\n    onInput(nValue: Partial<RegisterStates>) {\r\n\r\n        nValue.repeatPasswordError = undefined;\r\n        nValue.passwordError = undefined;\r\n        nValue.usernameError = undefined;\r\n\r\n        // Warnung wenn Passwörter nicht matchen\r\n        if (\r\n            (nValue.password !== undefined && nValue.password !== this.state.repeatPassword)\r\n            || (nValue.repeatPassword !== undefined && nValue.repeatPassword !== this.state.password)\r\n        ) {\r\n            nValue.repeatPasswordError = ERRORS.passwordMatch;\r\n        }\r\n\r\n        // Warnung wenn Passwort leer ist\r\n        if (nValue.password !== undefined && nValue.password.length < 1) {\r\n            nValue.passwordError = ERRORS.passwordToShort;\r\n        }\r\n\r\n        // Wenn Nutzername zu kurz\r\n        if (nValue.username !== undefined && nValue.username.length < 1) {\r\n            nValue.usernameError = ERRORS.usernameToShort;\r\n        }\r\n\r\n        this.setState(nValue as RegisterStates);\r\n    }\r\n\r\n    async onSubmit() {\r\n        this.setState({ busy: true, error: undefined });\r\n\r\n        const { username, password } = this.state;\r\n\r\n        try {\r\n            await this.props.connector.register(username, password);\r\n            window.location.href = \"#/\";\r\n        } catch (e) {\r\n            this.setState({\r\n                busy: false,\r\n                error: e.message\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return <LoginCardComponent mode=\"register\">\r\n\r\n            {this.state.error && <Alert color=\"danger\">\r\n                {this.state.error}\r\n            </Alert>}\r\n\r\n            <FormGroup>\r\n                <Label>Name</Label>\r\n                <Input type=\"text\" value={this.state.name} autoComplete=\"off\" readOnly />\r\n            </FormGroup>\r\n\r\n            <SmartInputComponent\r\n                label=\"Username\"\r\n                name=\"username\"\r\n                placeholder=\"william.walker\"\r\n                value={this.state.username}\r\n                type=\"text\"\r\n                onValue={this.onInput}\r\n                error={this.state.usernameError}\r\n                autoComplete=\"username\"\r\n            />\r\n\r\n            <SmartInputComponent\r\n                onValue={this.onInput}\r\n                label=\"Passwort\"\r\n                name=\"password\"\r\n                placeholder=\"12345678\"\r\n                value={this.state.password}\r\n                type=\"password\"\r\n                error={this.state.passwordError}\r\n                autoComplete=\"new-password\"\r\n            />\r\n\r\n            <SmartInputComponent\r\n                onValue={this.onInput}\r\n                label=\"Passwort wiederholen\"\r\n                name=\"repeatPassword\"\r\n                placeholder=\"12345678\"\r\n                value={this.state.repeatPassword}\r\n                type=\"password\"\r\n                error={this.state.repeatPasswordError}\r\n                autoComplete=\"new-password\"\r\n                onKeyPress={OnEnterPress(this.onSubmit)}\r\n            />\r\n\r\n            <Button\r\n                color=\"success\"\r\n                onClick={this.onSubmit}\r\n                disabled={!checkUndefined(this.state.repeatPasswordError, this.state.passwordError, this.state.usernameError)}\r\n            >\r\n                {this.state.busy && <FontAwesomeIcon icon={faSync} spin />}\r\n                Registrieren\r\n            </Button>\r\n\r\n        </LoginCardComponent>\r\n    }\r\n\r\n}\r\n\r\nfunction checkUndefined(...items: any[]): boolean {\r\n    for (let item of items) {\r\n        if (item !== undefined) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    return true;\r\n}","import { Chat } from \"../../models/Chat\";\r\nimport { ListGroupItem, ListGroupItemHeading, ListGroupItemText, Badge } from \"reactstrap\";\r\nimport React from \"react\";\r\nimport AChatsHandler from \"../../logic/AChatsHandler\";\r\n\r\nexport interface ChatListItemProps {\r\n    chat: Chat;\r\n    chatsHandler: AChatsHandler;\r\n}\r\n\r\ninterface ChatListItemStates {\r\n    lastMessageDifference: string;\r\n    messageId?: string\r\n}\r\n\r\nexport class ChatListItemComponent extends React.Component<ChatListItemProps, ChatListItemStates> {\r\n\r\n    private interval: number = 0;\r\n\r\n    constructor(props: ChatListItemProps) {\r\n        super(props);\r\n        this.state = {\r\n            lastMessageDifference: \"\"\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.interval = window.setInterval(this.setDifference.bind(this), 60000);\r\n    }\r\n\r\n    componentDidUpdate(oldProps: ChatListItemProps, oldStates: ChatListItemStates) {\r\n        // Nur wenn es nicht im Zuge von lastMessageDifference ist\r\n        if (oldStates.messageId !== this.props.chat.getLastMessage()!.id) {\r\n            this.setDifference();\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.clearInterval(this.interval);\r\n    }\r\n\r\n    private setCurrentChat() {\r\n        this.props.chatsHandler.currentChat = this.props.chat;\r\n    }\r\n\r\n    private setDifference() {\r\n        let lastMessage = this.props.chat.getLastMessage();\r\n        if (lastMessage) {\r\n            this.setState({\r\n                lastMessageDifference: lastMessage!.created.fromNow(),\r\n                messageId: lastMessage.id\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let message = this.props.chat.getLastMessage();\r\n\r\n        let text: string | JSX.Element = message === null ? \"Keine Nachricht\" : message!.text;\r\n\r\n        let unreadMessages = this.props.chat.unreadMessages;\r\n        let unreadBadge = <></>;\r\n\r\n        if (text.length > 23) {\r\n            text = text.substr(0, 23) + \"...\";\r\n        }\r\n        //console.log(text);\r\n\r\n        if (unreadMessages > 0) {\r\n            unreadBadge = <Badge color=\"primary\" pill>{unreadMessages}</Badge>\r\n            text = <strong>{text}</strong>\r\n        }\r\n\r\n        return <ListGroupItem onClick={this.setCurrentChat.bind(this)} active={this.props.chatsHandler.currentChat === this.props.chat}>\r\n            <div className=\"d-flex w-100 justify-content-between\">\r\n                <ListGroupItemHeading>{this.props.chat.partner.name}</ListGroupItemHeading>\r\n                <small>{this.state.lastMessageDifference}</small>\r\n            </div>\r\n            <ListGroupItemText className=\"d-flex w-100 justify-content-between\">\r\n                {text}\r\n                {unreadBadge}\r\n            </ListGroupItemText>\r\n        </ListGroupItem>;\r\n    }\r\n}","import React from \"react\";\r\nimport { Progress } from \"reactstrap\";\r\n\r\nexport interface PointProps {\r\n    label: string;\r\n    score: number;\r\n}\r\n\r\nexport function PointComponent({label, score}: PointProps) : JSX.Element {\r\n    var color = \"primary\"; // 16 - 50\r\n\r\n    if (score <= 5) { // 0 - 5\r\n        color = \"danger\";\r\n    }\r\n    else if (score <= 15) { // 6 - 15\r\n        color = \"warning\";\r\n    }\r\n    else if (score >= 70) { // 70 - 100\r\n        color = \"success\";\r\n    }\r\n    else if (score >= 50) { // 50 - 70\r\n        color = \"info\";\r\n    }\r\n\r\n    return <div>\r\n        {label}\r\n        <Progress color={color} value={score}>\r\n            {score}\r\n        </Progress>\r\n    </div>;\r\n}","import React from \"react\";\r\nimport { Chat } from \"../../models/Chat\";\r\nimport { Card, CardBody, ListGroup, Container } from \"reactstrap\";\r\nimport { DefaultComponentProps } from \"../../DefaultComponentProps\";\r\nimport IChatsListener from \"../../logic/IChatsListener\";\r\nimport { VoidLike } from \"../../logic/VoidLike\";\r\nimport { ChatListItemComponent } from \"./ChatListItemComponent\";\r\nimport AChatsHandler from \"../../logic/AChatsHandler\";\r\nimport { Points } from \"../../models/Points\";\r\nimport setWindowTitle from \"../../logic/setWindowTitle\";\r\nimport { PointComponent } from \"./PointComponent\";\r\n\r\nexport interface ChatListProps extends DefaultComponentProps {\r\n    isOpen: boolean;\r\n    chatsHandler: AChatsHandler;\r\n}\r\n\r\nexport interface ChatListStates {\r\n    chats: Chat[]\r\n    currentChat?: Chat\r\n    currentPoints: Points;\r\n}\r\n\r\nexport class ChatsListComponent extends React.Component<ChatListProps, ChatListStates> implements IChatsListener {\r\n\r\n    constructor(props: ChatListProps) {\r\n        super(props);\r\n        this.state = {\r\n            chats: [],\r\n            currentChat: undefined,\r\n            currentPoints: {\r\n                chefSatisfaction: 0,\r\n                customerExperience: 0,\r\n                budget: 0\r\n            }\r\n        };\r\n    }\r\n\r\n    onPointsChange(currentPoints: Points): VoidLike {\r\n        this.setState({ currentPoints });\r\n    }\r\n\r\n    onCurrentChatChange(currentChat?: Chat): VoidLike {\r\n        this.setState({ currentChat });\r\n    }\r\n\r\n    onChatChange(chats: Chat[]): VoidLike {\r\n        this.setState({ chats });\r\n    }\r\n\r\n    componentDidMount() {\r\n        setWindowTitle(\"Chats von William Walker\");\r\n        this.props.chatsHandler.attach(this);\r\n        this.props.chatsHandler.initMessages();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.chatsHandler.detatch(this);\r\n    }\r\n\r\n    render() {\r\n\r\n        if (!this.props.isOpen) return <></>;\r\n\r\n        const { chats, currentPoints } = this.state;\r\n\r\n        return <Container>\r\n            <Card color=\"secondary\">\r\n                <CardBody>\r\n                    <div className=\"contact-profile\">\r\n                        <img className=\"contact-picture\" src=\"http://emilcarlsson.se/assets/harveyspecter.png\" alt=\"William Walker\" />\r\n                        <div className=\"contact-name\">\r\n                            William Walker\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"progressbars\">\r\n                        <PointComponent label=\"Kundenerfahrung\" score={currentPoints.customerExperience} />\r\n                        <PointComponent label=\"Chefzufriedenheit\" score={currentPoints.chefSatisfaction} />\r\n                        <PointComponent label=\"Firmenbudget\" score={currentPoints.budget} />\r\n                    </div>\r\n                </CardBody>\r\n            </Card>\r\n            <ListGroup className=\"chat-list\">\r\n                {\r\n                    chats.map(c => <ChatListItemComponent chat={c} key={c.chatId} chatsHandler={this.props.chatsHandler} />)\r\n                }\r\n            </ListGroup>\r\n        </Container>;\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport {Button, Container, ListGroup, ListGroupItem, Modal, ModalBody, ModalFooter, ModalHeader} from \"reactstrap\";\r\nimport {Chat} from \"../../models/Chat\";\r\nimport IChatListener from \"../../logic/IChatListener\";\r\nimport {DefaultComponentProps} from \"../../DefaultComponentProps\";\r\nimport {Message} from \"../../models/Message\";\r\nimport moment from \"moment\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faPaperPlane, faSmile} from \"@fortawesome/free-regular-svg-icons\";\r\nimport {Answer} from \"../../models/Answer\";\r\nimport {text} from \"@fortawesome/fontawesome-svg-core\";\r\n\r\nexport interface ChatMessageStates {\r\n    chat?: Chat;\r\n    openAnswers: boolean;\r\n    chosenAnswer?: Answer;\r\n}\r\n\r\nexport class ChatMessageComponent extends React.Component<DefaultComponentProps, ChatMessageStates> implements IChatListener {\r\n\r\n    private messagesEnd: any;\r\n\r\n    constructor(props: DefaultComponentProps) {\r\n        super(props);\r\n        this.state = {\r\n            chat: undefined,\r\n            openAnswers: false,\r\n        };\r\n        this.openAnswers = this.openAnswers.bind(this);\r\n        this.onAnswerChoose = this.onAnswerChoose.bind(this);\r\n        this.onSendMessage = this.onSendMessage.bind(this);\r\n    }\r\n\r\n    onChatChange(chat: Chat): void | Promise<void> {\r\n        this.setState({chat, chosenAnswer: undefined});\r\n    }\r\n\r\n    onMessage(chat: Chat, message: Message): void | Promise<void> {\r\n        this.setState({chat, chosenAnswer: undefined});\r\n    }\r\n\r\n    scrollToBottom() {\r\n        this.messagesEnd.scrollIntoView({behavior: \"smooth\"});\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.chatsHandler.attach(this);\r\n        this.scrollToBottom();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.chatsHandler.detatch(this);\r\n        this.scrollToBottom();\r\n    }\r\n\r\n    openAnswers() {\r\n        let answer = this.state.chat!.getLastMessage()!.answers[0];\r\n        this.setState(o => {\r\n            return {openAnswers: !o.openAnswers};\r\n        });\r\n        if (this.state.chosenAnswer === undefined) {\r\n            const chosenAnswer = (answer === undefined) ? undefined : answer;\r\n            this.setState({chosenAnswer});\r\n        }\r\n    }\r\n\r\n    onAnswerChoose(chosenAnswer: Answer) {\r\n        this.setState({chosenAnswer, openAnswers: false});\r\n    }\r\n\r\n    toggleModal() {\r\n        this.setState({openAnswers: !this.openAnswers});\r\n    }\r\n\r\n    onSendMessage() {\r\n        if (this.state.chosenAnswer !== undefined) {\r\n            const answer = this.state.chosenAnswer;\r\n            this.props.chatsHandler.submitAnswer(answer!, this.state.chat!.chatId, this.state.chat!.getLastMessage()!.id);\r\n        }\r\n    }\r\n\r\n    ln2br(text: string) {\r\n        return {__html: text.replace(\"\\n\", \"<br />\")};\r\n    }\r\n\r\n    render() {\r\n        if (this.state.chat === undefined) {\r\n            return <Container>\r\n                <div className=\"contact-profile\">\r\n                    <img className=\"contact-picture\" alt=\"\"/>\r\n                    <div className=\"contact-name\">\r\n                        <em>Kein Chat ausgewählt</em>\r\n                    </div>\r\n                </div>\r\n                <div className=\"messages col-md-12\">\r\n                    <div className=\"row\">\r\n                        <div className=\"message\">\r\n                            <em>Keine Nachrichten</em>\r\n                        </div>\r\n                    </div>\r\n                    <div style={{float: \"left\", clear: \"both\"}}\r\n                         ref={(el) => {\r\n                             this.messagesEnd = el;\r\n                         }}>\r\n                    </div>\r\n                </div>\r\n            </Container>\r\n        } else {\r\n            return <Container>\r\n                <div className=\"contact-profile\">\r\n                    <img className=\"contact-picture\" src={this.state.chat!.partner.imageUrl != \"\" ? this.state.chat!.partner.imageUrl : \"./default.jpg\"}\r\n                         alt=\"\"/>\r\n                    <div className=\"contact-name\">{this.state.chat!.partner.name}</div>\r\n                </div>\r\n                <div className=\"messages col-md-12\">\r\n                    {\r\n                        this.state.chat && this.state.chat.messages.map(m => {\r\n                            return <div className=\"row\">\r\n                                <div className=\"message\">\r\n                                    <div className={\"bubble\" + (m.isAnswer ? \" reply\" : \" receive\")}>\r\n                                        <div className=\"content\">\r\n                                            <p dangerouslySetInnerHTML={this.ln2br(m.text)} />\r\n                                            <p className=\"time\">\r\n                                                {m.created.isBefore(moment().startOf('day')) && m.created.format('L')}\r\n                                                &nbsp;\r\n                                                {m.created.format('HH:mm')}\r\n                                            </p>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        })\r\n                    }\r\n                    <div style={{float: \"left\", clear: \"both\", margin: \"10px\"}}\r\n                         ref={(el) => {\r\n                             this.messagesEnd = el;\r\n                         }}>\r\n                    </div>\r\n                    {\r\n                        this.state.chat.getLastMessage() && (this.state.chat.getLastMessage()!.answers.length > 0) ?\r\n                            <div className=\"row\">\r\n                                <Modal isOpen={this.state.openAnswers} toggle={() => this.toggleModal()}>\r\n                                    <ModalHeader toggle={() => this.toggleModal()}>Ihre\r\n                                        Antwortmöglichkeiten</ModalHeader>\r\n                                    <ModalBody>\r\n                                        <ListGroup>\r\n                                            {\r\n                                                this.state.chat.getLastMessage()!.answers.map(a => {\r\n                                                    return <ListGroupItem tag=\"button\"\r\n                                                                          className={this.state.chosenAnswer === a ? 'active' : ''}\r\n                                                                          onClick={() => this.onAnswerChoose(a)}\r\n                                                                          id={\"answer-\" + a.id}>\r\n                                                        {a.text}\r\n                                                    </ListGroupItem>\r\n                                                })\r\n                                            }\r\n                                        </ListGroup>\r\n                                    </ModalBody>\r\n                                    <ModalFooter>\r\n                                        <Button color=\"secondary\" onClick={() => this.toggleModal()}>Abbrechen\r\n                                        </Button>\r\n                                    </ModalFooter>\r\n                                </Modal>\r\n                            </div>\r\n                            :\r\n                            ''\r\n                    }\r\n\r\n                </div>\r\n                <div className=\"message-input\">\r\n                    <div className=\"row text-center\">\r\n                        <div className=\"col-md-1\">\r\n                            <Button color=\"primary\" onClick={() => console.log(\"I am useless. :^)\")}>\r\n                                <FontAwesomeIcon icon={faSmile}/>\r\n                            </Button>\r\n                        </div>\r\n                        <div className=\"col-md-10\">\r\n                            <div className=\"form-control\" onClick={this.openAnswers}>\r\n                                {\r\n                                    this.state.chat.getLastMessage()!.isAnswer ? '' : (\r\n                                        !this.state.chosenAnswer ?\r\n                                            <i>Bitte Antwort wählen</i>\r\n                                            :\r\n                                            this.state.chosenAnswer!.text\r\n                                    )\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-md-1\">\r\n                            <Button color=\"primary\" onClick={this.onSendMessage}>\r\n                                <FontAwesomeIcon icon={faPaperPlane}/>\r\n                            </Button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </Container>\r\n                ;\r\n        }\r\n    }\r\n}\r\n\r\n// todo: Harvey Specter => conatct name\r\n","import {Button, Nav, Navbar, NavbarBrand, NavItem} from \"reactstrap\";\r\nimport React from \"react\";\r\n\r\nexport interface NavbarProps {\r\n    toggleChatsList: () => void;\r\n}\r\n\r\nexport function NavbarComponent({toggleChatsList}: NavbarProps): JSX.Element {\r\n    return <Navbar color=\"faded\" dark className=\"mb-3\">\r\n        <NavbarBrand href=\"#\" className=\"mr-auto\">\r\n            Life-Work-Balance von William Walker\r\n        </NavbarBrand>\r\n        <Nav>\r\n            <NavItem className=\"d-md-none\">\r\n                <Button color=\"primary\" onClick={toggleChatsList}>\r\n                    Chatliste\r\n                </Button>\r\n            </NavItem>\r\n        </Nav>\r\n    </Navbar>;\r\n}","import {Jumbotron} from \"reactstrap\";\r\nimport React from \"react\";\r\nimport {faBookDead} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\n\r\nconst Error404Component: React.FC = () => {\r\n    return <Jumbotron>\r\n        <h1>\r\n            <FontAwesomeIcon icon={faBookDead} />\r\n            Error 404\r\n        </h1>\r\n        <p className=\"lead\">\r\n            Die Seite gibt es nicht\r\n        </p>\r\n        <p className=\"lead\">\r\n            <a href=\"#/\" color=\"primary\">\r\n                Zur Startseite\r\n            </a>\r\n        </p>\r\n    </Jumbotron>;\r\n};\r\n\r\nexport default Error404Component;","import {Jumbotron} from \"reactstrap\";\r\nimport {faSync} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport React from \"react\";\r\n\r\nconst ReconnectingComponent : React.FC = () => {\r\n    return <Jumbotron>\r\n        <h1>\r\n            <FontAwesomeIcon icon={faSync} spin />\r\n            Die Verbindung wurde unterbrochen.\r\n        </h1>\r\n        <p className=\"lead\">\r\n            Bitte warten Sie bis die Verbindung wiederhergestellt wurde.....\r\n        </p>\r\n    </Jumbotron>\r\n};\r\n\r\nexport default ReconnectingComponent;","import React, { useEffect } from \"react\";\r\nimport { Container, Jumbotron, Button } from \"reactstrap\";\r\n\r\nexport function GameOverPage(): JSX.Element {\r\n    useEffect(()=>{\r\n        document.getElementsByTagName(\"body\")[0].classList.add(\"gameover-background\");\r\n\r\n        return ()=> document.getElementsByTagName(\"body\")[0].classList.remove(\"gameover-background\");\r\n    });\r\n\r\n    return <Container>\r\n        <Jumbotron className=\"transparent\">\r\n            <h1 className=\"display-3\">\r\n                GameOver <span role=\"img\">☠</span>\r\n            </h1>\r\n            Du wurdest entlassen. <br/>\r\n            Dein Konto wurde gelöscht. Du musst ein neues erstellen um wieder zu spielen\r\n            <p className=\"lead\">\r\n                <Button color=\"primary\" onClick={()=>window.location.reload()}>\r\n                    Neues Leben beginnen\r\n                </Button>\r\n            </p>\r\n        </Jumbotron>\r\n    </Container>;\r\n}","import {DefaultComponentProps} from \"../../DefaultComponentProps\";\r\nimport {Alert, Button, Modal, ModalBody, ModalFooter, ModalHeader} from \"reactstrap\";\r\nimport * as React from \"react\";\r\nimport {IErrorHandler} from \"../../logic/IErrorHandler\";\r\n\r\ninterface ErrorStates {\r\n    errors: string[];\r\n}\r\n\r\nexport class ErrorComponent extends React.Component<DefaultComponentProps, ErrorStates> implements IErrorHandler{\r\n\r\n    constructor(props: DefaultComponentProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            errors: []\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.chatsHandler.attach(this);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.chatsHandler.detatch(this);\r\n    }\r\n\r\n    onError(message: string) {\r\n        this.setState(s => {\r\n            return {\r\n                errors: [...s.errors, message]\r\n            };\r\n        });\r\n    }\r\n\r\n    private onClose() {\r\n        this.setState({\r\n            errors: []\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return <Modal isOpen={this.state.errors.length > 0}>\r\n            <ModalHeader>Es sind Fehler aufgetreten</ModalHeader>\r\n            <ModalBody>\r\n                Folgende Fehler sind aufgetreten: <br/>\r\n                {this.state.errors.map(e=><Alert color=\"danger\" key={e}>{e}</Alert>)}\r\n            </ModalBody>\r\n            <ModalFooter>\r\n                <Button color=\"primary\" onClick={this.onClose.bind(this)}>Ok</Button>\r\n            </ModalFooter>\r\n        </Modal>\r\n    }\r\n}","import React from 'react';\r\nimport AChatsHandler from \"./logic/AChatsHandler\";\r\nimport {AppStateMode} from \"./models/AppStateMode\";\r\nimport {Connector} from \"./logic/Connector\";\r\nimport IConnectionListener from \"./logic/IConnectionListener\";\r\nimport {LoginComponent} from \"./components/login/LoginComponent\";\r\nimport {RegisterComponent} from \"./components/login/RegisterComponent\";\r\nimport {Redirect, Route, Switch} from \"react-router\";\r\nimport {ChatsListComponent} from \"./components/sidebar/ChatListComponent\";\r\nimport {Col, Container, Row} from \"reactstrap\";\r\nimport {ChatMessageComponent} from \"./components/chat/ChatMessageComponent\";\r\nimport {NavbarComponent} from \"./components/globals/NavbarComponent\";\r\nimport {HashRouter} from \"react-router-dom\";\r\nimport Error404Component from \"./components/Error404Component\";\r\nimport ReconnectingComponent from \"./components/ReconnectingComponent\";\r\nimport {GameOverPage} from \"./components/gameover/GameOverPage\";\r\nimport {ErrorComponent} from \"./components/globals/ErrorComponent\";\r\n\r\ninterface AppStates {\r\n    isChatListOpen: boolean;\r\n    chatsHandler?: AChatsHandler;\r\n    mode: AppStateMode;\r\n    connector: Connector;\r\n}\r\n\r\nexport class App extends React.Component<{}, AppStates> implements IConnectionListener {\r\n\r\n    constructor(props: {}) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            isChatListOpen: true,\r\n            connector: new Connector(\"http://localhost:8080/server-1.0-SNAPSHOT\", this, false),\r\n            mode: AppStateMode.LOGIN\r\n        };\r\n\r\n        this.renderLoginBody = this.renderLoginBody.bind(this);\r\n        this.renderNormalBody = this.renderNormalBody.bind(this);\r\n    }\r\n\r\n    onConnect(chatsHandler: AChatsHandler): void {\r\n        this.setState({\r\n            chatsHandler,\r\n            mode: AppStateMode.GAME\r\n        });\r\n    }\r\n\r\n    onDisconnect(): void {\r\n        this.setState({\r\n            chatsHandler: undefined,\r\n            mode: AppStateMode.CONNECTING\r\n        });\r\n    }\r\n\r\n    toggleChatsList() {\r\n        this.setState(o => {\r\n            return {\r\n                isChatListOpen: !o.isChatListOpen\r\n            }\r\n        })\r\n    }\r\n\r\n    private renderLoginBody() {\r\n        return <>\r\n            <Route path=\"/login\" exact render={() => <LoginComponent connector={this.state.connector}/>}/>\r\n            <Route path=\"/register\" exact render={() => <RegisterComponent connector={this.state.connector}/>}/>\r\n            <Redirect from=\"*\" to=\"/login\"/>\r\n        </>;\r\n    }\r\n\r\n    private renderNormalBody() {\r\n        return <>\r\n            <Route path=\"/\" exact>\r\n                <Row>\r\n                    <Col md={4}>\r\n                        <ChatsListComponent chatsHandler={this.state.chatsHandler!} isOpen={this.state.isChatListOpen}/>\r\n                    </Col>\r\n                    <Col md={8}>\r\n                        <ChatMessageComponent chatsHandler={this.state.chatsHandler!}/>\r\n                    </Col>\r\n                </Row>\r\n            </Route>\r\n            <ErrorComponent chatsHandler={this.state.chatsHandler!}/>\r\n        </>;\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            <NavbarComponent toggleChatsList={this.toggleChatsList.bind(this)}/>\r\n\r\n            <Container fluid>\r\n                <HashRouter>\r\n                    <Switch>\r\n                        {this.state.mode === AppStateMode.LOGIN && <this.renderLoginBody/>}\r\n                        {this.state.mode === AppStateMode.GAME && <this.renderNormalBody/>}\r\n                        {this.state.mode === AppStateMode.GAMEOVER && <GameOverPage/>}\r\n                        {this.state.mode === AppStateMode.CONNECTING && <ReconnectingComponent/>}\r\n                        <Route path=\"/404\" exact component={() => <Error404Component/>}/>\r\n                        <Redirect from=\"*\" to=\"/404\"/>\r\n                    </Switch>\r\n                </HashRouter>\r\n            </Container>\r\n        </>\r\n    }\r\n\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './styles/main.scss';\r\nimport {App} from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport \"moment/locale/de\";\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}