{"version":3,"sources":["components/ChatListItemComponent.tsx","components/ChatListComponent.tsx","logic/IChatsListener.ts","logic/IChatListener.ts","models/Chat.ts","models/Message.ts","logic/MockChatsHandler.ts","logic/AChatsHandler.ts","components/ChatMessageComponent.tsx","components/login/LoginCard.tsx","components/login/SmartInputComponent.tsx","components/login/LoginComponent.tsx","components/login/RegisterComponent.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ChatListItemComponent","props","interval","state","lastMessageDifference","this","window","setInterval","setDifference","bind","oldProps","oldStates","messageId","chat","getLastMessage","id","clearInterval","chatsHandler","currentChat","lastMessage","setState","created","fromNow","message","text","unreadMessages","unreadBadge","Badge","color","pill","ListGroupItem","onClick","setCurrentChat","active","className","ListGroupItemHeading","partner","name","ListGroupItemText","React","Component","ChatsListComponent","chats","undefined","attach","detatch","isOpen","Card","CardBody","CardTitle","ListGroup","map","c","key","chatId","isIChatsListener","obj","onChatChange","isIChatListener","onMessage","Chat","init","messages","sort","a","b","unix","push","length","forEach","m","userHasRead","Message","image","isAnswer","answers","moment","locale","MockChatsHandler","simulateMessage","console","log","setTimeout","quereMessage","socketMessage","Array","isArray","onSocketMessage","i","command","imageUrl","j","Math","random","k","toString","Date","getTime","chatsListener","chatListener","_currentChat","listener","detatchListener","answer","answerId","sendMessage","Error","targetMessages","filter","l","collection","o","useMessage","addMessage","targetChat","find","audio","Audio","play","then","remove","targetMessage","onAnswer","readAllMessages","onCurrentChatChange","ChatMessageComponent","messagesEnd","openAnswers","onAnswerChoose","onSendMessage","scrollIntoView","behavior","scrollToBottom","chosenAnswer","Container","style","float","clear","ref","el","src","alt","isBefore","startOf","format","tag","Button","icon","faSmile","faPaperPlane","LoginCardComponent","width","innerWidth","onSizeChange","document","getElementsByTagName","classList","add","addEventListener","removeEventListener","backdropFilter","backgroundColor","CardHeader","mode","ButtonGroup","href","Form","children","SmartInputComponent","FormGroup","Label","label","Input","type","placeholder","value","onChange","callback","onValue","evt","target","partial","invalid","error","autoComplete","FormFeedback","LoginComponent","username","password","onInput","onSubmit","nValue","login","disabled","ERRORS","usernameToShort","passwordToShort","passwordMatch","RegisterComponent","usernameError","passwordError","repeatPassword","repeatPasswordError","register","readOnly","checkUndefined","items","App","connect","isChatListOpen","Navbar","dark","NavbarBrand","Nav","NavItem","toggleChatsList","fluid","path","exact","Row","Col","md","render","Boolean","location","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d8962e3a.chunk.js","sourcesContent":["import { Chat } from \"../models/Chat\";\r\nimport { ListGroupItem, ListGroupItemHeading, ListGroupItemText, Badge } from \"reactstrap\";\r\nimport React from \"react\";\r\nimport AChatsHandler from \"../logic/AChatsHandler\";\r\n\r\nexport interface ChatListItemProps {\r\n    chat: Chat;\r\n    chatsHandler: AChatsHandler;\r\n}\r\n\r\ninterface ChatListItemStates {\r\n    lastMessageDifference: string;\r\n    messageId?: string\r\n}\r\n\r\nexport class ChatListItemComponent extends React.Component<ChatListItemProps, ChatListItemStates> {\r\n\r\n    private interval: number = 0;\r\n\r\n    constructor(props: ChatListItemProps) {\r\n        super(props);\r\n        this.state = {\r\n            lastMessageDifference: \"\"\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.interval = window.setInterval(this.setDifference.bind(this), 60000);\r\n    }\r\n\r\n    componentDidUpdate(oldProps: ChatListItemProps, oldStates: ChatListItemStates) {\r\n        // Nur wenn es nicht im Zuge von lastMessageDifference ist\r\n        if (oldStates.messageId !== this.props.chat.getLastMessage()!.id) {\r\n            this.setDifference();\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.clearInterval(this.interval);\r\n    }\r\n\r\n    private setCurrentChat() {\r\n        this.props.chatsHandler.currentChat = this.props.chat;\r\n    }\r\n\r\n    private setDifference() {\r\n        let lastMessage = this.props.chat.getLastMessage();\r\n        if (lastMessage) {\r\n            this.setState({\r\n                lastMessageDifference: lastMessage!.created.fromNow(),\r\n                messageId: lastMessage.id\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let message = this.props.chat.getLastMessage();\r\n\r\n        let text: string | JSX.Element = message === null ? \"Keine Nachricht\" : message!.text;\r\n\r\n        let unreadMessages = this.props.chat.unreadMessages;\r\n        let unreadBadge = <></>;\r\n\r\n        if (unreadMessages > 0) {\r\n            unreadBadge = <Badge color=\"primary\" pill>{unreadMessages}</Badge>\r\n            text = <strong>{text}</strong>\r\n        }\r\n\r\n        return <ListGroupItem onClick={this.setCurrentChat.bind(this)} active={this.props.chatsHandler.currentChat === this.props.chat}>\r\n            <div className=\"d-flex w-100 justify-content-between\">\r\n                <ListGroupItemHeading>{this.props.chat.partner.name}</ListGroupItemHeading>\r\n                <small>{this.state.lastMessageDifference}</small>\r\n            </div>\r\n            <ListGroupItemText className=\"d-flex w-100 justify-content-between\">\r\n                {text}\r\n                {unreadBadge}\r\n            </ListGroupItemText>\r\n        </ListGroupItem>;\r\n    }\r\n}","import React from \"react\";\r\nimport { Chat } from \"../models/Chat\";\r\nimport { Card, CardBody, ListGroup, CardTitle } from \"reactstrap\";\r\nimport { DefaultComponentProps } from \"../DefaultComponentProps\";\r\nimport IChatsListener from \"../logic/IChatsListener\";\r\nimport { VoidLike } from \"../logic/VoidLike\";\r\nimport { ChatListItemComponent } from \"./ChatListItemComponent\";\r\nimport AChatsHandler from \"../logic/AChatsHandler\";\r\n\r\nexport interface ChatListProps extends DefaultComponentProps {\r\n    isOpen: boolean;\r\n    chatsHandler: AChatsHandler;\r\n}\r\n\r\nexport interface ChatListStates {\r\n    chats: Chat[]\r\n    currentChat?: Chat\r\n}\r\n\r\nexport class ChatsListComponent extends React.Component<ChatListProps, ChatListStates> implements IChatsListener {\r\n    \r\n    constructor(props: ChatListProps) {\r\n        super(props);\r\n        this.state = {\r\n            chats: [],\r\n            currentChat: undefined\r\n        };\r\n    }\r\n\r\n    onCurrentChatChange(currentChat?: Chat): VoidLike {\r\n        this.setState({ currentChat });\r\n    }\r\n    \r\n    onChatChange(chats: Chat[]): VoidLike {\r\n        this.setState({ chats });\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.chatsHandler.attach(this);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.chatsHandler.detatch(this);\r\n    }\r\n\r\n    render() {\r\n        \r\n        if (!this.props.isOpen) return <></>;\r\n\r\n        return <Card>\r\n            <CardBody>\r\n                <CardTitle>William Walker</CardTitle>\r\n            </CardBody>\r\n            <ListGroup>\r\n                {\r\n                    this.state.chats.map(c => <ChatListItemComponent chat={c} key={c.chatId} chatsHandler={this.props.chatsHandler} />)\r\n                }\r\n            </ListGroup>\r\n        </Card>;\r\n    }\r\n}","import { VoidLike } from \"./VoidLike\";\r\nimport { Chat } from \"../models/Chat\";\r\n\r\n/**\r\n * Beobachtet alle Chats\r\n */\r\nexport default interface IChatsListener {\r\n    /**\r\n     * Wird aufgerufen wenn:\r\n     *  - Eine neue Nachricht eingeht\r\n     *  - Ein neuer Chat erstellt wurde\r\n     * @param chats Alle bekannten Chats\r\n     */\r\n    onChatChange(chats: Chat[]): VoidLike;\r\n\r\n    /**\r\n     * Wird aufgerufen, wenn ein Chat ausgewählt wird\r\n     * @param currentChat Aktueller Chat\r\n     */\r\n    onCurrentChatChange(currentChat?: Chat): VoidLike;\r\n}\r\n\r\nexport function isIChatsListener(obj: any) : obj is IChatsListener {\r\n    if (typeof(obj) === \"object\") {\r\n        if (obj.onChatChange !== undefined) {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    return false;\r\n}","import { Chat } from \"../models/Chat\";\r\nimport { VoidLike } from \"./VoidLike\";\r\nimport { Message } from \"../models/Message\";\r\n\r\n/**\r\n * Beobachtet einen Chat\r\n */\r\nexport default interface IChatListener {\r\n\r\n    /**\r\n     * Wird aufgerufen, wenn sich der aktuelle Chat ändert\r\n     * @param currentChat Aktueller Chat\r\n     */\r\n    onChatChange(currentChat: Chat): VoidLike;\r\n\r\n    /**\r\n     * Wird aufgerufen, wenn eine Nachricht empfangen wird oder es neue Antworten gibt\r\n     * @param currentChat Aktueller Chat\r\n     * @param message Eingegangende Message\r\n     */\r\n    onMessage(currentChat: Chat, message: Message): VoidLike;\r\n}\r\n\r\nexport function isIChatListener(obj: any) : obj is IChatListener {\r\n    if (typeof(obj) === \"object\") {\r\n        if (obj.onChatChange !== undefined && obj.onMessage !== undefined) {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    return false;\r\n}","import { IMessage, Message } from \"./Message\";\r\nimport { Partner } from \"./Partner\";\r\n\r\nexport interface IChat {\r\n    messages: IMessage[] | Message[];\r\n    partner: Partner;\r\n    chatId: number;\r\n}\r\n\r\nexport class Chat implements IChat {\r\n    messages: Message[];\r\n    partner: Partner;\r\n    chatId: number;\r\n\r\n    constructor(init: IChat) {\r\n        this.chatId = init.chatId;\r\n        this.partner = init.partner;\r\n        this.messages = [];\r\n    }\r\n\r\n    addMessage(message: Message) {\r\n        this.messages = this.messages.sort((a,b) => b.created.unix() - a.created.unix());\r\n        this.messages.push(message);\r\n    }\r\n\r\n    getLastMessage() : Message | null {\r\n        if (this.messages.length > 0) {\r\n            return this.messages[this.messages.length-1];\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    public get unreadMessages() : number {\r\n        let unreadMessages = 0;\r\n\r\n        this.messages.forEach(m => {\r\n            if (!m.userHasRead) {\r\n                unreadMessages++;\r\n            }\r\n        });\r\n\r\n        return unreadMessages;\r\n    }\r\n}","import { Answer } from \"./Answer\";\r\nimport moment from \"moment\";\r\n\r\nexport interface IMessage {\r\n    id: string;\r\n    text: string;\r\n    image: string // Zu definieren\r\n    isAnswer: boolean;\r\n    answers: Answer[]\r\n    userHasRead: boolean;\r\n    created: number | moment.Moment;\r\n}\r\n\r\nexport class Message implements IMessage {\r\n    id: string;\r\n    text: string;\r\n    image: string;\r\n    isAnswer: boolean;\r\n    answers: Answer[];\r\n    userHasRead: boolean;\r\n    created: moment.Moment;\r\n\r\n    constructor(init: IMessage) {\r\n        this.id = init.id;\r\n        this.text = init.text;\r\n        this.image = init.image;\r\n        this.isAnswer = init.isAnswer;\r\n        this.answers = init.answers;\r\n        this.userHasRead = init.userHasRead;\r\n        this.created = moment(init.created).locale(\"de\");\r\n    }\r\n}\r\n","import AChatsHandler from \"./AChatsHandler\";\r\nimport { SocketMessage } from \"../models/SocketMessage\";\r\nimport { VoidLike } from \"./VoidLike\";\r\n\r\nexport class MockChatsHandler extends AChatsHandler {\r\n\r\n    public async connect(): Promise<boolean> {\r\n        (window as any).simulateMessage = this.simulateMessage.bind(this);\r\n        console.log(\"Globale Funktion simulateMessage(...) hinzugefügt\");\r\n\r\n        window.setTimeout(this.quereMessage.bind(this), 2000);\r\n\r\n        return true;\r\n    }\r\n\r\n    protected sendMessage(socketMessage: SocketMessage): VoidLike {\r\n        console.log(\"Nachricht an Server\", socketMessage);\r\n    }\r\n\r\n    public simulateMessage(message: SocketMessage | SocketMessage[]) {\r\n        if (Array.isArray(message)) {\r\n            message.forEach(m => this.onSocketMessage(m));\r\n        }\r\n        else {\r\n            this.onSocketMessage(message);\r\n        }\r\n    }\r\n\r\n    private quereMessage() {\r\n        for (let i = 0; i < 5; i++) {\r\n            this.simulateMessage(\r\n                {\r\n                    command: \"CreateChat\",\r\n                    chat: {\r\n                        chatId: i,\r\n                        partner: {\r\n                            name: \"Kunde \" + (i + 1),\r\n                            imageUrl: \"http://emilcarlsson.se/assets/harveyspecter.png\",\r\n                        },\r\n                        messages: [],\r\n                    }\r\n                });\r\n\r\n            for (let j = 0; j < 10; j++) {\r\n                let isAnswer = (Math.random() < 0.5);\r\n                let answers = [];\r\n                if (!isAnswer) {\r\n                    let a = Math.random() * 4 + 1;\r\n                    for (let k = 0; k < a; k++) {\r\n                        answers.push({\r\n                            id: j*10+k,\r\n                            text: \"Antwort \"+j+''+k\r\n                        });\r\n                    }\r\n                }\r\n                this.simulateMessage({\r\n                    command: \"AddMessage\",\r\n                    chatId: i,\r\n                    message: {\r\n                        id: ((i*10)+j).toString(),\r\n                        text: \"Hallo Will \"+((i*10)+j).toString(),\r\n                        image: \"\",\r\n                        answers: answers,\r\n                        userHasRead: false,\r\n                        created: (new Date().getTime() - 99999999),\r\n                        isAnswer: isAnswer\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n","import IChatsListener, { isIChatsListener } from \"./IChatsListener\";\r\nimport IChatListener, { isIChatListener } from \"./IChatListener\";\r\nimport { Chat } from \"../models/Chat\";\r\nimport { SocketMessage } from \"../models/SocketMessage\";\r\nimport { VoidLike } from \"./VoidLike\";\r\nimport { IMessage, Message } from \"../models/Message\";\r\nimport { Answer } from \"../models/Answer\";\r\n\r\n/**\r\n * Verwaltet alle Chats und Nachrichten und kommuniziert über die angehangenden Listener\r\n */\r\nexport default abstract class AChatsHandler {\r\n\r\n    private chatsListener: IChatsListener[];\r\n    private chatListener: IChatListener[];\r\n    private chats: Chat[]\r\n    private _currentChat?: Chat\r\n\r\n    constructor() {\r\n        this.chatListener = [];\r\n        this.chatsListener = [];\r\n        this.chats = [];\r\n    }\r\n\r\n    public get currentChat(): Chat | undefined {\r\n        return this._currentChat;\r\n    }\r\n\r\n    public set currentChat(chat: Chat | undefined) {\r\n        this._currentChat = chat;\r\n        if (chat !== undefined) {\r\n            this.readAllMessages();\r\n            this.chatListener.forEach(c => c.onChatChange(this._currentChat!));\r\n        }\r\n\r\n        this.chatsListener.forEach(c => c.onCurrentChatChange(this._currentChat));\r\n    }\r\n\r\n    /**\r\n     * Verbindet mit dem Server (oder dem Mock Server)\r\n     */\r\n    public abstract connect(): Promise<boolean>;\r\n\r\n    /**\r\n     * Sendet die Message an den Server\r\n     * @param socketMessage Abzusendene Message\r\n     */\r\n    protected abstract sendMessage(socketMessage: SocketMessage): VoidLike;\r\n\r\n    /**\r\n     * Hängt den Listener an den Handler. Sollte in componentDidMount() aufgerufen werden\r\n     * @param listener Listener\r\n     */\r\n    public attach(listener: IChatListener | IChatsListener): void {\r\n        if (isIChatListener(listener)) {\r\n            this.chatListener.push(listener);\r\n        }\r\n        else if (isIChatsListener(listener)) {\r\n            this.chatsListener.push(listener);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Entfernt den Listener vom Handler. Sollte in componentWillUnmount() aufgerufen werden\r\n     * @param listener Listener\r\n     */\r\n    public detatch(listener: IChatsListener | IChatListener): void {\r\n        if (isIChatListener(listener)) {\r\n            this.chatListener = this.detatchListener(listener, this.chatListener)\r\n        }\r\n        else if (isIChatsListener(listener)) {\r\n            this.chatsListener = this.detatchListener(listener, this.chatsListener);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sendet die Antwort an den Server\r\n     * @param answer Antwort\r\n     */\r\n    public submitAnswer(answer: Answer | number) : void {\r\n        let answerId : number;\r\n        if (typeof(answer) === \"number\") {\r\n            answerId = answer;\r\n        }\r\n        else {\r\n            answerId = answer.id;\r\n        }\r\n\r\n        this.sendMessage({\r\n            command: \"SubmitAnswer\",\r\n            answerId\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Makiert alle Nachrichten im aktuellen Chat als gelesen\r\n     */\r\n    public readAllMessages() {\r\n        if (this._currentChat === undefined) {\r\n            throw new Error(\"No current Chat.\");\r\n        }\r\n\r\n        let targetMessages = this._currentChat.messages.filter(m => !m.userHasRead);\r\n        for (let message of targetMessages) {\r\n            message.userHasRead = true;\r\n            this.sendMessage({\r\n                command: \"ReadMessage\",\r\n                messageId: message.id\r\n            });\r\n        }\r\n        this.chatsListener.forEach(l => l.onChatChange(this.chats));\r\n    }\r\n\r\n    /**\r\n     * Entfernt den Listener aus dem Array (gibt das neue Array zurück)\r\n     * @param obj Listener\r\n     * @param collection Listenercollection\r\n     */\r\n    private detatchListener<T>(obj: T, collection: T[]): T[] {\r\n        return collection.filter(o => o !== obj);\r\n    }\r\n\r\n    /**\r\n     * Fügt die Nachricht dem übergebenen Chat hinzu\r\n     * @param chatId Betroffene ChatId\r\n     * @param message Neue Nachricht\r\n     */\r\n    private onMessage(chatId: number, message: IMessage) {\r\n        let useMessage = new Message(message);\r\n\r\n        if (this._currentChat !== undefined && chatId === this._currentChat.chatId) {\r\n            this._currentChat.addMessage(useMessage);\r\n            this.chatListener.forEach(c => c.onMessage(this._currentChat!, useMessage));\r\n        }\r\n        else {\r\n            let targetChat = this.chats.find(c => c.chatId === chatId);\r\n            if (targetChat !== undefined) {\r\n                targetChat.addMessage(useMessage);\r\n            }\r\n            else {\r\n                throw new Error(`Chat ${chatId} not found. Fatal Error`);\r\n            }\r\n        }\r\n\r\n        // Notification\r\n        let audio = new Audio(\"eventually.mp3\");\r\n        audio.play().then(()=>audio.remove());\r\n\r\n        this.chatsListener.forEach(c => c.onChatChange(this.chats));\r\n    }\r\n\r\n    /**\r\n     * Fügt die übergebene Antwort der bestimmten Nachricht im bestimmen Chat hinzu und benachrichtigt\r\n     * @param chatId Betroffener Chat\r\n     * @param messageId Betroffene Nachricht\r\n     * @param answer Gegebene Antwort\r\n     */\r\n    private onAnswer(chatId: number, messageId: string, answer: Answer) {\r\n        let targetChat = this.chats.find(c => c.chatId === chatId);\r\n        if (targetChat === undefined) {\r\n            throw new Error(`Chat ${chatId} not found. Fatal Error`);\r\n        }\r\n\r\n        let targetMessage = targetChat.messages.find(m => m.id === messageId);\r\n        if (targetMessage === undefined) {\r\n            throw new Error(`Message ${messageId} on Chat ${chatId} not found. Fatal Error`);\r\n        }\r\n\r\n        targetMessage.answers.push(answer);\r\n\r\n        if (this._currentChat !== undefined && this._currentChat.chatId === chatId) {\r\n            this.chatListener.forEach(c => c.onMessage(this._currentChat!, targetMessage!));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Bearbeitet die vom Server bekommene Nachricht und führt Aktionen aus\r\n     * @param message Vom Server bekommene Message\r\n     */\r\n    protected onSocketMessage(message: SocketMessage) {\r\n        switch (message.command) {\r\n            case \"CreateChat\":\r\n                this.chats.push(new Chat(message.chat));\r\n                this.chatsListener.forEach(c => c.onChatChange(this.chats));\r\n                break;\r\n            case \"AddMessage\":\r\n                this.onMessage(message.chatId, message.message);\r\n                break;\r\n            case \"AddAnswer\":\r\n                this.onAnswer(message.chatId, message.messageId, message.answer);\r\n                break;\r\n            default:\r\n                throw new Error(`The Command ${message.command} is unknown`);\r\n        }\r\n    }\r\n\r\n}","import React from \"react\";\r\nimport {Button, Container, ListGroup, ListGroupItem} from \"reactstrap\";\r\nimport { Chat } from \"../models/Chat\";\r\nimport IChatListener from \"../logic/IChatListener\";\r\nimport {DefaultComponentProps} from \"../DefaultComponentProps\";\r\nimport {Message} from \"../models/Message\";\r\nimport moment from \"moment\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faPaperPlane, faSmile} from \"@fortawesome/free-regular-svg-icons\";\r\n\r\nexport interface ChatMessageStates {\r\n    chat?: Chat;\r\n    openAnswers: boolean;\r\n    chosenAnswer?: number;\r\n}\r\n\r\nexport class ChatMessageComponent extends React.Component<DefaultComponentProps, ChatMessageStates> implements IChatListener {\r\n\r\n    private messagesEnd: any;\r\n\r\n    constructor(props: DefaultComponentProps) {\r\n        super(props);\r\n        this.state = {\r\n            chat: undefined,\r\n            openAnswers: false,\r\n        };\r\n        this.openAnswers = this.openAnswers.bind(this);\r\n        this.onAnswerChoose = this.onAnswerChoose.bind(this);\r\n        this.onSendMessage = this.onSendMessage.bind(this);\r\n    }\r\n\r\n    onChatChange(chat: Chat): void | Promise<void> {\r\n        this.setState({ chat });\r\n    }\r\n\r\n    onMessage(chat: Chat, message: Message): void | Promise<void> {\r\n        this.setState({ chat });\r\n    }\r\n\r\n    scrollToBottom() {\r\n        this.messagesEnd.scrollIntoView({ behavior: \"smooth\" });\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.chatsHandler.attach(this);\r\n        this.scrollToBottom();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.chatsHandler.detatch(this);\r\n        this.scrollToBottom();\r\n    }\r\n\r\n    openAnswers() {\r\n        let answer = this.state.chat!.getLastMessage()!.answers[0];\r\n        this.setState(o => {\r\n            return {openAnswers: !o.openAnswers};\r\n        });\r\n        if (this.state.chosenAnswer === undefined) {\r\n            let id = (answer === undefined) ? undefined : answer.id;\r\n            this.setState({chosenAnswer: id});\r\n        }\r\n    }\r\n\r\n    onAnswerChoose(id: number) {\r\n       this.setState({chosenAnswer: id, openAnswers: false});\r\n    }\r\n\r\n    onSendMessage() {\r\n        if (this.state.chosenAnswer !== undefined) {\r\n            console.log(this.state.chosenAnswer);\r\n            let answer = this.state.chat!.getLastMessage()!.answers.find(a => a.id === this.state.chosenAnswer);\r\n            console.log(\"sending answer (\"+answer!.id+\"): \"+answer!.text);\r\n        } else {\r\n            console.log(\"no answer chosen.\")\r\n        }\r\n    }\r\n\r\n    render() {\r\n        if (this.state.chat === undefined) {\r\n            return <Container>\r\n                <div className=\"contact-profile\">\r\n                    <img className=\"contact-picture\" />\r\n                    <div className=\"contact-name\">\r\n                        <em>Kein Chat ausgewählt</em>\r\n                    </div>\r\n                </div>\r\n                <div className=\"messages col-md-12\">\r\n                    <div className=\"row\">\r\n                        <div className=\"message\">\r\n                            <em>Keine Nachrichten</em>\r\n                        </div>\r\n                    </div>\r\n                    <div style={{ float:\"left\", clear: \"both\" }}\r\n                         ref={(el) => { this.messagesEnd = el; }}>\r\n                    </div>\r\n                </div>\r\n            </Container>\r\n        }\r\n        else {\r\n            return <Container>\r\n                <div className=\"contact-profile\">\r\n                    <img className=\"contact-picture\" src={this.state.chat!.partner.imageUrl}\r\n                         alt={this.state.chat!.partner.name}/>\r\n                    <div className=\"contact-name\">{this.state.chat!.partner.name}</div>\r\n                </div>\r\n                <div className=\"messages col-md-12\">\r\n                    {\r\n                        this.state.chat && this.state.chat.messages.map(m => {\r\n                            return <div className=\"row\">\r\n                                <div className=\"message\">\r\n                                    <div className={\"bubble\" + (m.isAnswer ? \" reply\" : \" receive\")}>\r\n                                        <p>{m.text}</p>\r\n                                        <p className=\"time\">\r\n                                            {m.created.isBefore(moment().startOf('day')) && m.created.format('L')}\r\n                                            &nbsp;\r\n                                            {m.created.format('HH:mm')}\r\n                                        </p>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        })\r\n                    }\r\n                    <div style={{ float:\"left\", clear: \"both\" }}\r\n                         ref={(el) => { this.messagesEnd = el; }}>\r\n                    </div>\r\n                    {\r\n                        this.state.openAnswers && this.state.chat.getLastMessage() ?\r\n                            <div className=\"row\">\r\n                                <div className=\"col-md-1\">&nbsp;</div>\r\n                                <div className=\"col-md-10\">\r\n                                    <ListGroup>\r\n                                        {\r\n                                            this.state.chat.getLastMessage()!.answers.map(a => {\r\n                                                return <ListGroupItem tag=\"button\" className={this.state.chosenAnswer === a.id ? 'active' : ''} onClick={() => this.onAnswerChoose(a.id)} id={\"answer-\"+a.id}>\r\n                                                    {a.text}\r\n                                                </ListGroupItem>\r\n                                            })\r\n                                        }\r\n                                    </ListGroup>\r\n                                </div>\r\n                                <div className=\"col-md-1\">&nbsp;</div>\r\n                            </div>\r\n                            :\r\n                            ''\r\n                    }\r\n\r\n                </div>\r\n                <div className=\"message-input\">\r\n                    <div className=\"row text-center\">\r\n                        <div className=\"col-md-1\">\r\n                            <Button>\r\n                                <FontAwesomeIcon icon={faSmile} />\r\n                            </Button>\r\n                        </div>\r\n                        <div className=\"col-md-10\">\r\n                            <div className=\"form-control\" onClick={this.openAnswers}>\r\n                                {\r\n                                    // todo: get chosen answer\r\n                                    this.state.chat.getLastMessage()!.isAnswer ? '' : (\r\n                                        !this.state.chosenAnswer ?\r\n                                            <i>Bitte Antwort wählen</i>\r\n                                            :\r\n                                            this.state.chat.getLastMessage()!.answers.find(a => a.id === this.state.chosenAnswer)!.text\r\n                                    )\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-md-1\">\r\n                            <Button color=\"primary\" onClick={this.onSendMessage}>\r\n                                <FontAwesomeIcon icon={faPaperPlane} />\r\n                            </Button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </Container>\r\n                ;\r\n        }\r\n    }\r\n}\r\n\r\n// todo: Harvey Specter => conatct name\r\n","import { Card, CardBody, Form, Button, ButtonGroup, CardHeader, CardTitle } from \"reactstrap\";\r\nimport \"../../styles/elements/login.scss\";\r\nimport React from \"react\";\r\n\r\nexport interface LoginCardProps {\r\n    mode: \"login\" | \"register\"\r\n}\r\n\r\ninterface LoginCardStates {\r\n    width: number;\r\n}\r\n\r\nexport class LoginCardComponent extends React.Component<React.PropsWithChildren<LoginCardProps>, LoginCardStates> {\r\n\r\n    constructor(props: React.PropsWithChildren<LoginCardProps>) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            width: window.innerWidth\r\n        }\r\n\r\n        this.onSizeChange = this.onSizeChange.bind(this)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.onSizeChange();\r\n        document.getElementsByTagName(\"body\")[0].classList.add(\"login-register-background\");\r\n        window.addEventListener(\"resize\", this.onSizeChange);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        document.getElementsByTagName(\"body\")[0].classList.remove(\"login-register-background\");\r\n        window.removeEventListener(\"resize\", this.onSizeChange);\r\n    }\r\n\r\n    onSizeChange() {\r\n        this.setState({\r\n            width: window.innerWidth\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return <Card className={this.state.width > 992 ? \"mx-auto w-50\" : \"mx-auto\"} style={{ backdropFilter: \"blur(10px)\", backgroundColor: \"#FFFFFF88\" }}>\r\n            <CardHeader>\r\n                <CardTitle>\r\n                    <h5 className=\"\">\r\n                        {this.props.mode === \"login\" && \"Anmelden\"}\r\n                        {this.props.mode === \"register\" && \"Registrieren\"}\r\n                    </h5>\r\n                </CardTitle>\r\n            </CardHeader>\r\n            <CardBody>\r\n                <ButtonGroup>\r\n                    <Button color=\"primary\" active={this.props.mode === \"login\"} href=\"#/login\" tag=\"a\">Anmelden</Button>\r\n                    <Button color=\"primary\" active={this.props.mode === \"register\"} href=\"#/register\" tag=\"a\">Registrieren</Button>\r\n                </ButtonGroup>\r\n                <Form>\r\n                    {this.props.children}\r\n                </Form>\r\n            </CardBody>\r\n        </Card>\r\n    }\r\n}","import React from \"react\";\r\nimport { FormGroup, Label, Input, FormFeedback } from \"reactstrap\";\r\nimport { InputType } from \"reactstrap/lib/Input\";\r\n\r\ntype OnValueCallback<T> = (nValue: Partial<T>) => any;\r\n\r\nexport interface SmartInputProps<T> {\r\n    label: string\r\n    name: keyof T\r\n    placeholder?: string\r\n    value: string\r\n    onValue: OnValueCallback<T>\r\n    type: InputType\r\n    error?: string\r\n    autoComplete: string\r\n}\r\n\r\nfunction getValueHandler<T>(callback: OnValueCallback<T>): (event: React.ChangeEvent<HTMLInputElement>) => void {\r\n    return (evt) => {\r\n        let target = evt.target;\r\n        let field = target.name as keyof T;\r\n        let partial: Partial<T> = {};\r\n        (partial[field] as any) = target.value;\r\n        callback(partial);\r\n    };\r\n}\r\n\r\nexport function SmartInputComponent<T>(props: SmartInputProps<T>) {\r\n    return <FormGroup>\r\n        <Label>{props.label}</Label>\r\n        <Input\r\n            type={props.type}\r\n            placeholder={props.placeholder}\r\n            value={props.value}\r\n            name={props.name as string}\r\n            onChange={getValueHandler(props.onValue)}\r\n            invalid={props.error !== undefined}\r\n            autoComplete={props.autoComplete}\r\n        />\r\n        {props.error !== undefined &&\r\n            <FormFeedback>\r\n                {props.error}\r\n            </FormFeedback>}\r\n    </FormGroup>\r\n}","import { DefaultComponentProps } from \"../../DefaultComponentProps\";\r\nimport React from \"react\";\r\nimport { Button } from \"reactstrap\";\r\nimport \"../../styles/elements/login.scss\";\r\nimport { LoginCardComponent } from \"./LoginCard\";\r\nimport { SmartInputComponent } from \"./SmartInputComponent\";\r\n\r\nexport interface LoginStates {\r\n    username: string;\r\n    password: string;\r\n}\r\n\r\nexport class LoginComponent extends React.Component<DefaultComponentProps, LoginStates> {\r\n\r\n    constructor(props: DefaultComponentProps) {\r\n        super(props);\r\n        this.state = {\r\n            username: \"\",\r\n            password: \"\"\r\n        };\r\n\r\n        this.onInput = this.onInput.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n    }\r\n\r\n    onInput(nValue: Partial<LoginStates>) {\r\n        this.setState(nValue as LoginStates);\r\n    }\r\n\r\n    async onSubmit(): Promise<void> {\r\n\r\n        let login = {\r\n            username: this.state.username,\r\n            password: this.state.password\r\n        };\r\n\r\n        console.log(\r\n            \"Login mit\", login\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return <LoginCardComponent mode=\"login\">\r\n\r\n            <SmartInputComponent\r\n                label=\"Username\"\r\n                onValue={this.onInput}\r\n                name=\"username\"\r\n                placeholder=\"william.walker1\"\r\n                value={this.state.username}\r\n                type=\"text\"\r\n                autoComplete=\"username\"\r\n            />\r\n\r\n            <SmartInputComponent\r\n                label=\"Passwort\"\r\n                onValue={this.onInput}\r\n                name=\"password\"\r\n                placeholder=\"132456789\"\r\n                value={this.state.password}\r\n                type=\"password\"\r\n                autoComplete=\"current-password\"\r\n            />\r\n\r\n            <Button\r\n                onClick={this.onSubmit}\r\n                color=\"success\"\r\n                disabled={this.state.username.length === 0 || this.state.password.length === 0}\r\n            >\r\n                Anmelden\r\n            </Button>\r\n        </LoginCardComponent>\r\n    }\r\n}","import { DefaultComponentProps } from \"../../DefaultComponentProps\";\r\nimport React from \"react\";\r\nimport { LoginCardComponent } from \"./LoginCard\";\r\nimport { FormGroup, Input, Label, Button } from \"reactstrap\";\r\nimport { SmartInputComponent } from \"./SmartInputComponent\";\r\n\r\nconst ERRORS = {\r\n    usernameToShort: \"Nutzername darf nicht leer sein\",\r\n    passwordToShort: \"Passwort darf nicht leer sein\",\r\n    passwordMatch: \"Passwörter stimmen nicht überein\"\r\n};\r\n\r\ninterface RegisterStates {\r\n    name: string\r\n    username: string\r\n    usernameError: string\r\n    password: string\r\n    passwordError?: string\r\n    repeatPassword: string\r\n    repeatPasswordError?: string\r\n}\r\n\r\nexport class RegisterComponent extends React.Component<DefaultComponentProps, RegisterStates> {\r\n\r\n    constructor(props: DefaultComponentProps) {\r\n        super(props);\r\n        this.state = {\r\n            name: \"William Walker\",\r\n            username: \"\",\r\n            usernameError: ERRORS.usernameToShort,\r\n            password: \"\",\r\n            passwordError: ERRORS.passwordToShort,\r\n            repeatPassword: \"\"\r\n        };\r\n\r\n        this.onInput = this.onInput.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n    }\r\n\r\n    onInput(nValue: Partial<RegisterStates>) {\r\n\r\n        nValue.repeatPasswordError = undefined;\r\n        nValue.passwordError = undefined;\r\n        nValue.usernameError = undefined;\r\n\r\n        // Warnung wenn Passwörter nicht matchen\r\n        if (\r\n            (nValue.password !== undefined && nValue.password !== this.state.repeatPassword)\r\n            || (nValue.repeatPassword !== undefined && nValue.repeatPassword !== this.state.password)\r\n        ) {\r\n            nValue.repeatPasswordError = ERRORS.passwordMatch;\r\n        }\r\n\r\n        // Warnung wenn Passwort leer ist\r\n        if (nValue.password !== undefined && nValue.password.length < 1) {\r\n            nValue.passwordError = ERRORS.passwordToShort;\r\n        }\r\n\r\n        // Wenn Nutzername zu kurz\r\n        if (nValue.username !== undefined && nValue.username.length < 1) {\r\n            nValue.usernameError = ERRORS.usernameToShort;\r\n        }\r\n\r\n        this.setState(nValue as RegisterStates);\r\n    }\r\n\r\n    async onSubmit() {\r\n\r\n        let register = {\r\n            username: this.state.username,\r\n            password: this.state.password\r\n        };\r\n\r\n        console.log(\"Register with \", register);\r\n    }\r\n\r\n    render() {\r\n        return <LoginCardComponent mode=\"register\">\r\n\r\n            <FormGroup>\r\n                <Label>Name</Label>\r\n                <Input type=\"text\" value={this.state.name} autoComplete=\"off\" readOnly />\r\n            </FormGroup>\r\n\r\n            <SmartInputComponent\r\n                label=\"Username\"\r\n                name=\"username\"\r\n                placeholder=\"william.walker\"\r\n                value={this.state.username}\r\n                type=\"text\"\r\n                onValue={this.onInput}\r\n                error={this.state.usernameError}\r\n                autoComplete=\"username\"\r\n            />\r\n\r\n            <SmartInputComponent\r\n                onValue={this.onInput}\r\n                label=\"Passwort\"\r\n                name=\"password\"\r\n                placeholder=\"12345678\"\r\n                value={this.state.password}\r\n                type=\"password\"\r\n                error={this.state.passwordError}\r\n                autoComplete=\"new-password\"\r\n            />\r\n\r\n            <SmartInputComponent\r\n                onValue={this.onInput}\r\n                label=\"Passwort wiederholen\"\r\n                name=\"repeatPassword\"\r\n                placeholder=\"12345678\"\r\n                value={this.state.repeatPassword}\r\n                type=\"password\"\r\n                error={this.state.repeatPasswordError}\r\n                autoComplete=\"new-password\"\r\n            />\r\n\r\n            <Button\r\n                color=\"success\"\r\n                onClick={this.onSubmit}\r\n                disabled={!checkUndefined(this.state.repeatPasswordError, this.state.passwordError, this.state.usernameError)}\r\n            >\r\n                Registrieren\r\n            </Button>\r\n\r\n        </LoginCardComponent>\r\n    }\r\n\r\n}\r\n\r\nfunction checkUndefined(...items: any[]): boolean {\r\n    for (let item of items) {\r\n        if (item !== undefined) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    return true;\r\n}","import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { MockComponent } from './components/MockComponent';\r\nimport { Container, Col, Row, Navbar, NavbarBrand, Nav, NavItem, NavLink, Button } from 'reactstrap';\r\nimport { Router, Switch, Route } from 'react-router';\r\nimport { HashRouter } from 'react-router-dom';\r\nimport { ChatsListComponent } from './components/ChatListComponent';\r\nimport AChatsHandler from './logic/AChatsHandler';\r\nimport { MockChatsHandler } from './logic/MockChatsHandler';\r\nimport { ChatMessageComponent } from \"./components/ChatMessageComponent\";\r\nimport { LoginComponent } from './components/login/LoginComponent';\r\nimport { RegisterComponent } from './components/login/RegisterComponent';\r\n\r\ninterface AppStates {\r\n    isChatListOpen: boolean;\r\n}\r\n\r\nexport class App extends React.Component<{}, AppStates> {\r\n\r\n    private chatsHandler: AChatsHandler;\r\n\r\n    constructor(props: {}) {\r\n        super(props);\r\n        this.chatsHandler = new MockChatsHandler();\r\n        this.chatsHandler.connect();\r\n\r\n        this.state = {\r\n            isChatListOpen: true\r\n        };\r\n    }\r\n\r\n    toggleChatsList() {\r\n        this.setState(o => {\r\n            return {\r\n                isChatListOpen: !o.isChatListOpen\r\n            }\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            <Navbar color=\"faded\" dark className=\"mb-3\">\r\n                <NavbarBrand href=\"/\" className=\"mr-auto\">\r\n                    Telekilo\r\n                </NavbarBrand>\r\n                <Nav>\r\n                    <NavItem className=\"d-md-none\">\r\n                        <Button color=\"primary\" onClick={this.toggleChatsList.bind(this)}>\r\n                            Chatliste\r\n                        </Button>\r\n                    </NavItem>\r\n                </Nav>\r\n            </Navbar>\r\n\r\n            <Container fluid>\r\n                <HashRouter>\r\n                    <Switch>\r\n\r\n                        <Route path=\"/\" exact>\r\n                            <Row>\r\n                                <Col md={4}>\r\n                                    <ChatsListComponent chatsHandler={this.chatsHandler} isOpen={this.state.isChatListOpen} />\r\n                                </Col>\r\n                                <Col md={8}>\r\n                                    <ChatMessageComponent chatsHandler={this.chatsHandler} />\r\n                                </Col>\r\n                            </Row>\r\n                        </Route>\r\n\r\n                        <Route path=\"/login\" exact render={() => <LoginComponent chatsHandler={this.chatsHandler} />} />\r\n\r\n                        <Route path=\"/register\" exact render={() => <RegisterComponent chatsHandler={this.chatsHandler} />} />\r\n\r\n                    </Switch>\r\n                </HashRouter>\r\n            </Container>\r\n        </>\r\n    }\r\n\r\n}\r\n\r\n// Idee: https://bootsnipp.com/snippets/exR5v\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './styles/main.scss';\r\nimport {App} from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport \"moment/locale/de\";\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}